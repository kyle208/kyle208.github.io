"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8484],{2425:(n,r,e)=>{e.d(r,{A:()=>t});const t=e.p+"assets/images/\u9752\u9f99\u9762\u677f1-f4f23d193e84ab17b9038365f3603f6c.png"},2690:(n,r,e)=>{e.d(r,{A:()=>t});const t=e.p+"assets/images/\u9752\u9f99\u9762\u677f2-0df1734437279dc1b4dd9e80e8930c03.png"},4346:(n,r,e)=>{e.d(r,{A:()=>t});const t=e.p+"assets/images/\u9752\u9f99\u9762\u677f-660fed233729a306a9d5d47031fccc5a.png"},8453:(n,r,e)=>{e.d(r,{R:()=>i,x:()=>a});var t=e(6540);const s={},o=t.createContext(s);function i(n){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function a(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),t.createElement(o.Provider,{value:r},n.children)}},9148:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>_});const t=JSON.parse('{"id":"\u9ad8\u7ea7\u529f\u80fd/\u9ad8\u7ea7\u9996\u9875-\u9752\u9f99\u9762\u677f","title":"\u9ad8\u7ea7\u9996\u9875-\u9752\u9f99\u9762\u677f","description":"\ud83d\udea9\u5f53\u524d\u901a\u77e5\u6587\u4ef6\u9002\u914dVer2.17.2\u7248\u672c\u9752\u9f99\uff0c\u9762\u677f\u8bbe\u7f6e\u65e0\u89c6\u7248\u672c","source":"@site/docs/5.\u9ad8\u7ea7\u529f\u80fd/18.\u9ad8\u7ea7\u9996\u9875-\u9752\u9f99\u9762\u677f.md","sourceDirName":"5.\u9ad8\u7ea7\u529f\u80fd","slug":"/\u9ad8\u7ea7\u529f\u80fd/\u9ad8\u7ea7\u9996\u9875-\u9752\u9f99\u9762\u677f","permalink":"/docs/\u9ad8\u7ea7\u529f\u80fd/\u9ad8\u7ea7\u9996\u9875-\u9752\u9f99\u9762\u677f","draft":false,"unlisted":false,"editUrl":"https://github.com/kyle208/kylemanual/blob/master/docs/5.\u9ad8\u7ea7\u529f\u80fd/18.\u9ad8\u7ea7\u9996\u9875-\u9752\u9f99\u9762\u677f.md","tags":[],"version":"current","sidebarPosition":18,"frontMatter":{"sidebar_position":18},"sidebar":"tutorialSidebar","previous":{"title":"\u9ad8\u7ea7\u9996\u9875-\u5f71\u89c6\u641c\u7d22","permalink":"/docs/\u9ad8\u7ea7\u529f\u80fd/\u9ad8\u7ea7\u9996\u9875-\u5f71\u89c6\u641c\u7d22"},"next":{"title":"\u9ad8\u7ea7\u9996\u9875-\u7f51\u9875\u5185\u5bb9\u63d0\u53d6","permalink":"/docs/\u9ad8\u7ea7\u529f\u80fd/\u9ad8\u7ea7\u9996\u9875-\u7f51\u9875\u5185\u5bb9\u63d0\u53d6"}}');var s=e(4848),o=e(8453);const i={sidebar_position:18},a=void 0,p={},_=[{value:"\u63d0\u793a",id:"\u63d0\u793a",level:3},{value:"notify.py\u6587\u4ef6\u5185\u5bb9",id:"notifypy\u6587\u4ef6\u5185\u5bb9",level:3},{value:"sendNotify.js\u6587\u4ef6\u5185\u5bb9",id:"sendnotifyjs\u6587\u4ef6\u5185\u5bb9",level:3}];function c(n){const r={a:"a",admonition:"admonition",code:"code",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["\ud83d\udea9\u5f53\u524d\u901a\u77e5\u6587\u4ef6\u9002\u914d",(0,s.jsx)(r.strong,{children:"Ver2.17.2"}),"\u7248\u672c\u9752\u9f99\uff0c\u9762\u677f\u8bbe\u7f6e\u65e0\u89c6\u7248\u672c"]}),"\n",(0,s.jsxs)(r.admonition,{title:"\u6700\u91cd\u8981\u63d0\u793a",type:"danger",children:[(0,s.jsxs)(r.p,{children:["\ud83d\udea9",(0,s.jsx)(r.strong,{children:"\u5fc5\u987b\u4e0b\u8f7d\u7fa4\u6587\u4ef6/\u6587\u4ef6\u7cfb\u7edf\u7684\u3010HPSocket4C.dll\u3011\u653e\u7f6e\u5728\u6846\u67b6\u6839\u76ee\u5f55\u4e0b\u624d\u80fd\u6b63\u5e38\u4f7f\u7528\uff0c\u5426\u5219\u67d0\u4e9b\u6846\u67b6\u6253\u5f00\u63d2\u4ef6\u5c31\u5d29"})]}),(0,s.jsx)(r.p,{children:"\u67d0\u4e9b\u6846\u67b6\u81ea\u5e26\uff0c\u53ef\u4e0d\u7ba1\uff0c\u9664\u975e\u8fd8\u6709\u5d29\u6e83\u63d0\u793a\uff0c\u8bf4\u660e\u81ea\u5e26\u7684\u7248\u672c\u4f4e"})]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"\u56fe\u7247",src:e(4346).A+"",width:"771",height:"517"})}),"\n",(0,s.jsx)(r.h3,{id:"\u63d0\u793a",children:"\u63d0\u793a"}),"\n",(0,s.jsxs)(r.admonition,{title:"\u63d0\u793a1\uff1a",type:"tip",children:[(0,s.jsx)(r.p,{children:"\u9ed8\u8ba4\u7aef\u53e3:8090\uff0c\u5982\u9700\u66f4\u6539\uff0c\u81ea\u884c\u8bbe\u7f6e"}),(0,s.jsx)(r.p,{children:"\u901a\u77e5\u7fa4\uff1a\u8bbe\u7f6e\u4f60\u8981\u53d1\u9001\u901a\u77e5\u7684\u7fa4\u53f7"}),(0,s.jsx)(r.p,{children:"\u56de\u590d\u5185\u5bb9\uff1a\u81ea\u884c\u8bbe\u7f6e\u663e\u793a\u683c\u5f0f\uff0c\u6309\u53d8\u91cf\u8bbe\u7f6e\u54e6"}),(0,s.jsx)(r.p,{children:"\u901a\u77e5\u767d\u540d\u5355\u8bcd\uff1a\u8bbe\u7f6e\u4e86\u5c06\u53ea\u5728\u6709\u6b64\u8bcd\u4e0b\u53d1\u9001\uff0c#\u5206\u5272\u591a\u4e2a\u8bcd\uff0c\u9ed8\u8ba4\u6240\u6709\u901a\u77e5\u90fd\u53d1\u9001"})]}),"\n",(0,s.jsxs)(r.admonition,{title:"\u63d0\u793a2\uff1a",type:"tip",children:[(0,s.jsx)(r.p,{children:"\u3010\u53ef\u63a8\u9001\u5176\u4ed6\u81ea\u5b9a\u4e49\u5185\u5bb9\u54e6\uff0c\u81ea\u5b9a\u4e49\u63a8\u9001\u6307\u5357\uff1a\u3011"}),(0,s.jsxs)(r.p,{children:["\u5730\u5740\uff1a",(0,s.jsx)(r.a,{href:"http://127.0.0.1:8090",children:"http://127.0.0.1:8090"}),"  [\u7aef\u53e3\u53f7\u770b\u4f60\u8bbe\u7f6e\uff0c\u6b64\u4e3a\u672c\u5730\u5730\u5740\uff0c\u4f60\u53ef\u4ee5\u5185\u7f51\u7a7f\u900f\u6b64\u5730\u5740\uff0c\u5982\u679c\u662f\u516c\u7f51ip\uff0c\u6309\u7167\u516c\u7f51\u8bbe\u7f6e\u8bd5\u8bd5]"]}),(0,s.jsx)(r.p,{children:"\u7c7b\u578b\uff1aPOST"}),(0,s.jsx)(r.p,{children:"\u63d0\u4ea4\u5185\u5bb9\u683c\u5f0f\uff1a"}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'{"title":"\u4f60\u7684\u81ea\u5b9a\u4e49\u901a\u77e5\u6807\u9898" "content":"\u4f60\u7684\u81ea\u5b9a\u4e49\u901a\u77e5\u5185\u5bb9"}\n'})})]}),"\n",(0,s.jsxs)(r.admonition,{title:"\u63d0\u793a3\uff1a",type:"danger",children:[(0,s.jsx)(r.p,{children:"\u9752\u9f99\u9762\u677f\u81ea\u5b9a\u4e49\u901a\u77e5\u76ee\u524d\u4e0d\u652f\u6301\u81ea\u5b9a\u4e49\uff0c\u9700\u8981\u4f7f\u7528\u6211\u6539\u7684\u7248\u672c\uff0c\u8bf7\u5728\u7f51\u76d8/\u7fa4\u6587\u4ef6\u4e0b\u8f7d\u66ff\u6362\uff0c\u6216\u4e0b\u65b9\u4ee3\u7801\u590d\u5236"}),(0,s.jsx)(r.p,{children:"\u66ff\u6362\u9752\u9f99\u6587\u4ef6\u3010scripts\u3011\u76ee\u5f55\u4e0b\u7684notify.py/sendNotify.js\u4e24\u4e2a\u6587\u4ef6"}),(0,s.jsx)(r.p,{children:"\u3010config\u3011\u76ee\u5f55\u4e0b\u7684config.sh\u6700\u540e\u52a0\u5165"}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'export export WEBHOOK_URL=""  #\u586b\u5199\u4f60\u7684\u81ea\u5b9a\u4e49\u901a\u77e5\u5730\u5740\n'})}),(0,s.jsxs)(r.p,{children:["\u6709\u4e9b\u811a\u672c\u91cc\u4e5f\u6709\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8bf7\u4e5f\u66ff\u6362\u6700\u597d\r\n",(0,s.jsx)(r.img,{alt:"\u56fe\u7247",src:e(2425).A+"",width:"1263",height:"526"})]})]}),"\n",(0,s.jsxs)(r.admonition,{title:"\u63d0\u793a4\uff1a",type:"tip",children:[(0,s.jsxs)(r.p,{children:["\u7cfb\u7edf\u6587\u4ef6\u901a\u77e5\uff0c\u8bf7\u5982\u56fe\u8bbe\u7f6e\u5373\u53ef\r\n",(0,s.jsx)(r.img,{alt:"\u56fe\u7247",src:e(2690).A+"",width:"719",height:"833"})]}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"webhookBody\uff1a\u590d\u5236\u5982\u4e0b\u5185\u5bb9\u5373\u53ef\r\n\r\ntitle:$title\r\ncontent:$content\n"})})]}),"\n",(0,s.jsx)(r.h3,{id:"notifypy\u6587\u4ef6\u5185\u5bb9",children:"notify.py\u6587\u4ef6\u5185\u5bb9"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-py",metastring:"notify.py",children:'#!/usr/bin/env python3\r\n# _*_ coding:utf-8 _*_\r\nimport base64\r\nimport hashlib\r\nimport hmac\r\nimport json\r\nimport os\r\nimport re\r\nimport threading\r\nimport time\r\nimport urllib.parse\r\nimport smtplib\r\nfrom email.mime.text import MIMEText\r\nfrom email.header import Header\r\nfrom email.utils import formataddr\r\n\r\nimport requests\r\n\r\n# \u539f\u5148\u7684 print \u51fd\u6570\u548c\u4e3b\u7ebf\u7a0b\u7684\u9501\r\n_print = print\r\nmutex = threading.Lock()\r\n\r\n\r\n# \u5b9a\u4e49\u65b0\u7684 print \u51fd\u6570\r\ndef print(text, *args, **kw):\r\n    """\r\n    \u4f7f\u8f93\u51fa\u6709\u5e8f\u8fdb\u884c\uff0c\u4e0d\u51fa\u73b0\u591a\u7ebf\u7a0b\u540c\u4e00\u65f6\u95f4\u8f93\u51fa\u5bfc\u81f4\u9519\u4e71\u7684\u95ee\u9898\u3002\r\n    """\r\n    with mutex:\r\n        _print(text, *args, **kw)\r\n\r\n\r\n# \u901a\u77e5\u670d\u52a1\r\n# fmt: off\r\npush_config = {\r\n    \'HITOKOTO\': False,                  # \u542f\u7528\u4e00\u8a00\uff08\u968f\u673a\u53e5\u5b50\uff09\r\n\r\n    \'BARK_PUSH\': \'\',                    # bark IP \u6216\u8bbe\u5907\u7801\uff0c\u4f8b\uff1ahttps://api.day.app/DxHcxxxxxRxxxxxxcm/\r\n    \'BARK_ARCHIVE\': \'\',                 # bark \u63a8\u9001\u662f\u5426\u5b58\u6863\r\n    \'BARK_GROUP\': \'\',                   # bark \u63a8\u9001\u5206\u7ec4\r\n    \'BARK_SOUND\': \'\',                   # bark \u63a8\u9001\u58f0\u97f3\r\n    \'BARK_ICON\': \'\',                    # bark \u63a8\u9001\u56fe\u6807\r\n    \'BARK_LEVEL\': \'\',                   # bark \u63a8\u9001\u65f6\u6548\u6027\r\n    \'BARK_URL\': \'\',                     # bark \u63a8\u9001\u8df3\u8f6cURL\r\n\r\n    \'CONSOLE\': True,                    # \u63a7\u5236\u53f0\u8f93\u51fa\r\n\r\n    \'DD_BOT_SECRET\': \'\',                # \u9489\u9489\u673a\u5668\u4eba\u7684 DD_BOT_SECRET\r\n    \'DD_BOT_TOKEN\': \'\',                 # \u9489\u9489\u673a\u5668\u4eba\u7684 DD_BOT_TOKEN\r\n\r\n    \'FSKEY\': \'\',                        # \u98de\u4e66\u673a\u5668\u4eba\u7684 FSKEY\r\n\r\n    \'GOBOT_URL\': \'\',                    # go-cqhttp\r\n                                        # \u63a8\u9001\u5230\u4e2a\u4ebaQQ\uff1ahttp://127.0.0.1/send_private_msg\r\n                                        # \u7fa4\uff1ahttp://127.0.0.1/send_group_msg\r\n    \'GOBOT_QQ\': \'\',                     # go-cqhttp \u7684\u63a8\u9001\u7fa4\u6216\u7528\u6237\r\n                                        # GOBOT_URL \u8bbe\u7f6e /send_private_msg \u65f6\u586b\u5165 user_id=\u4e2a\u4ebaQQ\r\n                                        #               /send_group_msg   \u65f6\u586b\u5165 group_id=QQ\u7fa4\r\n    \'GOBOT_TOKEN\': \'\',                  # go-cqhttp \u7684 access_token\r\n\r\n    \'GOTIFY_URL\': \'\',                   # gotify\u5730\u5740,\u5982https://push.example.de:8080\r\n    \'GOTIFY_TOKEN\': \'\',                 # gotify\u7684\u6d88\u606f\u5e94\u7528token\r\n    \'GOTIFY_PRIORITY\': 0,               # \u63a8\u9001\u6d88\u606f\u4f18\u5148\u7ea7,\u9ed8\u8ba4\u4e3a0\r\n\r\n    \'IGOT_PUSH_KEY\': \'\',                # iGot \u805a\u5408\u63a8\u9001\u7684 IGOT_PUSH_KEY\r\n\r\n    \'PUSH_KEY\': \'\',                     # server \u9171\u7684 PUSH_KEY\uff0c\u517c\u5bb9\u65e7\u7248\u4e0e Turbo \u7248\r\n\r\n    \'DEER_KEY\': \'\',                     # PushDeer \u7684 PUSHDEER_KEY\r\n    \'DEER_URL\': \'\',                     # PushDeer \u7684 PUSHDEER_URL\r\n\r\n    \'CHAT_URL\': \'\',                     # synology chat url\r\n    \'CHAT_TOKEN\': \'\',                   # synology chat token\r\n\r\n    \'PUSH_PLUS_TOKEN\': \'\',              # push+ \u5fae\u4fe1\u63a8\u9001\u7684\u7528\u6237\u4ee4\u724c\r\n    \'PUSH_PLUS_USER\': \'\',               # push+ \u5fae\u4fe1\u63a8\u9001\u7684\u7fa4\u7ec4\u7f16\u7801\r\n\r\n    \'QMSG_KEY\': \'\',                     # qmsg \u9171\u7684 QMSG_KEY\r\n    \'QMSG_TYPE\': \'\',                    # qmsg \u9171\u7684 QMSG_TYPE\r\n\r\n    \'QYWX_ORIGIN\': \'\',                  # \u4f01\u4e1a\u5fae\u4fe1\u4ee3\u7406\u5730\u5740\r\n\r\n    \'QYWX_AM\': \'\',                      # \u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\r\n\r\n    \'QYWX_KEY\': \'\',                     # \u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba\r\n\r\n    \'TG_BOT_TOKEN\': \'\',                 # tg \u673a\u5668\u4eba\u7684 TG_BOT_TOKEN\uff0c\u4f8b\uff1a1407203283:AAG9rt-6RDaaX0HBLZQq0laNOh898iFYaRQ\r\n    \'TG_USER_ID\': \'\',                   # tg \u673a\u5668\u4eba\u7684 TG_USER_ID\uff0c\u4f8b\uff1a1434078534\r\n    \'TG_API_HOST\': \'\',                  # tg \u4ee3\u7406 api\r\n    \'TG_PROXY_AUTH\': \'\',                # tg \u4ee3\u7406\u8ba4\u8bc1\u53c2\u6570\r\n    \'TG_PROXY_HOST\': \'\',                # tg \u673a\u5668\u4eba\u7684 TG_PROXY_HOST\r\n    \'TG_PROXY_PORT\': \'\',                # tg \u673a\u5668\u4eba\u7684 TG_PROXY_PORT\r\n\r\n    \'AIBOTK_KEY\': \'\',                   # \u667a\u80fd\u5fae\u79d8\u4e66 \u4e2a\u4eba\u4e2d\u5fc3\u7684apikey \u6587\u6863\u5730\u5740\uff1ahttp://wechat.aibotk.com/docs/about\r\n    \'AIBOTK_TYPE\': \'\',                  # \u667a\u80fd\u5fae\u79d8\u4e66 \u53d1\u9001\u76ee\u6807 room \u6216 contact\r\n    \'AIBOTK_NAME\': \'\',                  # \u667a\u80fd\u5fae\u79d8\u4e66  \u53d1\u9001\u7fa4\u540d \u6216\u8005\u597d\u53cb\u6635\u79f0\u548ctype\u8981\u5bf9\u5e94\u597d\r\n\r\n    \'SMTP_SERVER\': \'\',                  # SMTP \u53d1\u9001\u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u5f62\u5982 smtp.exmail.qq.com:465\r\n    \'SMTP_SSL\': \'false\',                # SMTP \u53d1\u9001\u90ae\u4ef6\u670d\u52a1\u5668\u662f\u5426\u4f7f\u7528 SSL\uff0c\u586b\u5199 true \u6216 false\r\n    \'SMTP_EMAIL\': \'\',                   # SMTP \u6536\u53d1\u4ef6\u90ae\u7bb1\uff0c\u901a\u77e5\u5c06\u4f1a\u7531\u81ea\u5df1\u53d1\u7ed9\u81ea\u5df1\r\n    \'SMTP_PASSWORD\': \'\',                # SMTP \u767b\u5f55\u5bc6\u7801\uff0c\u4e5f\u53ef\u80fd\u4e3a\u7279\u6b8a\u53e3\u4ee4\uff0c\u89c6\u5177\u4f53\u90ae\u4ef6\u670d\u52a1\u5546\u8bf4\u660e\u800c\u5b9a\r\n    \'SMTP_NAME\': \'\',                    # SMTP \u6536\u53d1\u4ef6\u4eba\u59d3\u540d\uff0c\u53ef\u968f\u610f\u586b\u5199\r\n\r\n    \'PUSHME_KEY\': \'\',                   # PushMe \u9171\u7684 PUSHME_KEY\r\n\r\n    \'CHRONOCAT_QQ\': \'\',                 # qq\u53f7\r\n    \'CHRONOCAT_TOKEN\': \'\',              # CHRONOCAT \u7684token\r\n    \'CHRONOCAT_URL\': \'\',                # CHRONOCAT\u7684url\u5730\u5740\r\n\r\n    \'WEBHOOK_URL\': \'\',                  # \u81ea\u5b9a\u4e49\u901a\u77e5 \u8bf7\u6c42\u5730\u5740\r\n    \'WEBHOOK_BODY\': \'\',                 # \u81ea\u5b9a\u4e49\u901a\u77e5 \u8bf7\u6c42\u4f53\r\n    \'WEBHOOK_HEADERS\': \'\',              # \u81ea\u5b9a\u4e49\u901a\u77e5 \u8bf7\u6c42\u5934\r\n    \'WEBHOOK_METHOD\': \'\',               # \u81ea\u5b9a\u4e49\u901a\u77e5 \u8bf7\u6c42\u65b9\u6cd5\r\n    \'WEBHOOK_CONTENT_TYPE\': \'\'          # \u81ea\u5b9a\u4e49\u901a\u77e5 content-type\r\n}\r\nnotify_function = []\r\n# fmt: on\r\n\r\n# \u9996\u5148\u8bfb\u53d6 \u9762\u677f\u53d8\u91cf \u6216\u8005 github action \u8fd0\u884c\u53d8\u91cf\r\nfor k in push_config:\r\n    if os.getenv(k):\r\n        v = os.getenv(k)\r\n        push_config[k] = v\r\n\r\n\r\ndef bark(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 bark \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (push_config.get("BARK_PUSH") or kwargs.get("BARK_PUSH")):\r\n        print("bark \u670d\u52a1\u7684 BARK_PUSH \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("bark \u670d\u52a1\u542f\u52a8")\r\n    BARK_PUSH = kwargs.get("BARK_PUSH", push_config.get("BARK_PUSH"))\r\n    if BARK_PUSH.startswith("http"):\r\n        url = f"{BARK_PUSH}/{urllib.parse.quote_plus(title)}/{urllib.parse.quote_plus(content)}"\r\n    else:\r\n        url = f"https://api.day.app/{BARK_PUSH}/{urllib.parse.quote_plus(title)}/{urllib.parse.quote_plus(content)}"\r\n\r\n    bark_params = {\r\n        "BARK_ARCHIVE": "isArchive",\r\n        "BARK_GROUP": "group",\r\n        "BARK_SOUND": "sound",\r\n        "BARK_ICON": "icon",\r\n        "BARK_LEVEL": "level",\r\n        "BARK_URL": "url",\r\n    }\r\n    params = ""\r\n    for pair in filter(\r\n        lambda pairs: pairs[0].startswith("BARK_")\r\n        and pairs[0] != "BARK_PUSH"\r\n        and (pairs[1] or kwargs.get(pairs[0]))\r\n        and bark_params.get(pairs[0]),\r\n        push_config.items(),\r\n    ):\r\n        value = kwargs.get(pair[0], pair[1])\r\n        params += f"{bark_params.get(pair[0])}={value}&"\r\n    if params:\r\n        url = url + "?" + params.rstrip("&")\r\n    response = requests.get(url).json()\r\n\r\n    if response["code"] == 200:\r\n        print("bark \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("bark \u63a8\u9001\u5931\u8d25\uff01")\r\n\r\n\r\ndef console(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 \u63a7\u5236\u53f0 \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    print(f"{title}\\n\\n{content}")\r\n\r\n\r\ndef dingding_bot(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 \u9489\u9489\u673a\u5668\u4eba \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (\r\n        (kwargs.get("DD_BOT_SECRET") and kwargs.get("DD_BOT_TOKEN"))\r\n        or (push_config.get("DD_BOT_SECRET") and push_config.get("DD_BOT_TOKEN"))\r\n    ):\r\n        print("\u9489\u9489\u673a\u5668\u4eba \u670d\u52a1\u7684 DD_BOT_SECRET \u6216\u8005 DD_BOT_TOKEN \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("\u9489\u9489\u673a\u5668\u4eba \u670d\u52a1\u542f\u52a8")\r\n    if kwargs.get("DD_BOT_SECRET") and kwargs.get("DD_BOT_TOKEN"):\r\n        DD_BOT_SECRET = kwargs.get("DD_BOT_SECRET")\r\n        DD_BOT_TOKEN = kwargs.get("DD_BOT_TOKEN")\r\n    else:\r\n        DD_BOT_SECRET = push_config.get("DD_BOT_SECRET")\r\n        DD_BOT_TOKEN = push_config.get("DD_BOT_TOKEN")\r\n\r\n    timestamp = str(round(time.time() * 1000))\r\n    secret_enc = DD_BOT_SECRET.encode("utf-8")\r\n    string_to_sign = "{}\\n{}".format(timestamp, DD_BOT_SECRET)\r\n    string_to_sign_enc = string_to_sign.encode("utf-8")\r\n    hmac_code = hmac.new(\r\n        secret_enc, string_to_sign_enc, digestmod=hashlib.sha256\r\n    ).digest()\r\n    sign = urllib.parse.quote_plus(base64.b64encode(hmac_code))\r\n    url = f"https://oapi.dingtalk.com/robot/send?access_token={DD_BOT_TOKEN}&timestamp={timestamp}&sign={sign}"\r\n    headers = {"Content-Type": "application/json;charset=utf-8"}\r\n    data = {"msgtype": "text", "text": {"content": f"{title}\\n\\n{content}"}}\r\n    response = requests.post(\r\n        url=url, data=json.dumps(data), headers=headers, timeout=15\r\n    ).json()\r\n\r\n    if not response["errcode"]:\r\n        print("\u9489\u9489\u673a\u5668\u4eba \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("\u9489\u9489\u673a\u5668\u4eba \u63a8\u9001\u5931\u8d25\uff01")\r\n\r\n\r\ndef feishu_bot(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 \u98de\u4e66\u673a\u5668\u4eba \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (kwargs.get("DD_BOT_SECRET") or push_config.get("FSKEY")):\r\n        print("\u98de\u4e66 \u670d\u52a1\u7684 FSKEY \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("\u98de\u4e66 \u670d\u52a1\u542f\u52a8")\r\n    FSKEY = kwargs.get("DD_BOT_SECRET", push_config.get("FSKEY"))\r\n    url = f"https://open.feishu.cn/open-apis/bot/v2/hook/{FSKEY}"\r\n    data = {"msg_type": "text", "content": {"text": f"{title}\\n\\n{content}"}}\r\n    response = requests.post(url, data=json.dumps(data)).json()\r\n\r\n    if response.get("StatusCode") == 0:\r\n        print("\u98de\u4e66 \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("\u98de\u4e66 \u63a8\u9001\u5931\u8d25\uff01\u9519\u8bef\u4fe1\u606f\u5982\u4e0b\uff1a\\n", response)\r\n\r\n\r\ndef go_cqhttp(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 go_cqhttp \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (\r\n        (kwargs.get("GOBOT_URL") and kwargs.get("GOBOT_QQ"))\r\n        or (push_config.get("GOBOT_URL") and push_config.get("GOBOT_QQ"))\r\n    ):\r\n        print("go-cqhttp \u670d\u52a1\u7684 GOBOT_URL \u6216 GOBOT_QQ \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("go-cqhttp \u670d\u52a1\u542f\u52a8")\r\n    if kwargs.get("GOBOT_URL") and kwargs.get("GOBOT_QQ"):\r\n        GOBOT_URL = kwargs.get("GOBOT_URL")\r\n        GOBOT_QQ = kwargs.get("GOBOT_QQ")\r\n        GOBOT_TOKEN = kwargs.get("GOBOT_TOKEN")\r\n    else:\r\n        GOBOT_URL = push_config.get("GOBOT_URL")\r\n        GOBOT_QQ = push_config.get("GOBOT_QQ")\r\n        GOBOT_TOKEN = push_config.get("GOBOT_TOKEN")\r\n\r\n    url = f"{GOBOT_URL}?access_token={GOBOT_TOKEN}&{GOBOT_QQ}&message=\u6807\u9898:{title}\\n\u5185\u5bb9:{content}"\r\n    response = requests.get(url).json()\r\n\r\n    if response["status"] == "ok":\r\n        print("go-cqhttp \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("go-cqhttp \u63a8\u9001\u5931\u8d25\uff01")\r\n\r\n\r\ndef gotify(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 gotify \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (\r\n        (kwargs.get("GOTIFY_URL") and kwargs.get("GOTIFY_TOKEN"))\r\n        or (push_config.get("GOTIFY_URL") and push_config.get("GOTIFY_TOKEN"))\r\n    ):\r\n        print("gotify \u670d\u52a1\u7684 GOTIFY_URL \u6216 GOTIFY_TOKEN \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("gotify \u670d\u52a1\u542f\u52a8")\r\n    if kwargs.get("GOTIFY_URL") and kwargs.get("GOTIFY_TOKEN"):\r\n        GOTIFY_URL = kwargs.get("GOTIFY_URL")\r\n        GOTIFY_TOKEN = kwargs.get("GOBOTGOTIFY_TOKEN_QQ")\r\n        GOTIFY_PRIORITY = kwargs.get("GOTIFY_PRIORITY")\r\n    else:\r\n        GOTIFY_URL = push_config.get("GOTIFY_URL")\r\n        GOTIFY_TOKEN = push_config.get("GOTIFY_TOKEN")\r\n        GOTIFY_PRIORITY = kwargs.get("GOTIFY_PRIORITY")\r\n\r\n    url = f"{GOTIFY_URL}/message?token={GOTIFY_TOKEN}"\r\n    data = {\r\n        "title": title,\r\n        "message": content,\r\n        "priority": GOTIFY_PRIORITY,\r\n    }\r\n    response = requests.post(url, data=data).json()\r\n\r\n    if response.get("id"):\r\n        print("gotify \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("gotify \u63a8\u9001\u5931\u8d25\uff01")\r\n\r\n\r\ndef iGot(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 iGot \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (kwargs.get("IGOT_PUSH_KEY") or push_config.get("IGOT_PUSH_KEY")):\r\n        print("iGot \u670d\u52a1\u7684 IGOT_PUSH_KEY \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("iGot \u670d\u52a1\u542f\u52a8")\r\n    IGOT_PUSH_KEY = kwargs.get("IGOT_PUSH_KEY", push_config.get("IGOT_PUSH_KEY"))\r\n    url = f"https://push.hellyw.com/{IGOT_PUSH_KEY}"\r\n    data = {"title": title, "content": content}\r\n    headers = {"Content-Type": "application/x-www-form-urlencoded"}\r\n    response = requests.post(url, data=data, headers=headers).json()\r\n\r\n    if response["ret"] == 0:\r\n        print("iGot \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print(f\'iGot \u63a8\u9001\u5931\u8d25\uff01{response["errMsg"]}\')\r\n\r\n\r\ndef serverJ(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u901a\u8fc7 serverJ \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (kwargs.get("PUSH_KEY") or push_config.get("PUSH_KEY")):\r\n        print("serverJ \u670d\u52a1\u7684 PUSH_KEY \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("serverJ \u670d\u52a1\u542f\u52a8")\r\n    PUSH_KEY = kwargs.get("PUSH_KEY", push_config.get("PUSH_KEY"))\r\n\r\n    data = {"text": title, "desp": content.replace("\\n", "\\n\\n")}\r\n    if PUSH_KEY.find("SCT") != -1:\r\n        url = f"https://sctapi.ftqq.com/{PUSH_KEY}.send"\r\n    else:\r\n        url = f"https://sc.ftqq.com/{PUSH_KEY}.send"\r\n    response = requests.post(url, data=data).json()\r\n\r\n    if response.get("errno") == 0 or response.get("code") == 0:\r\n        print("serverJ \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print(f\'serverJ \u63a8\u9001\u5931\u8d25\uff01\u9519\u8bef\u7801\uff1a{response["message"]}\')\r\n\r\n\r\ndef pushdeer(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u901a\u8fc7PushDeer \u63a8\u9001\u6d88\u606f\r\n    """\r\n    if not (kwargs.get("DEER_KEY") or push_config.get("DEER_KEY")):\r\n        print("PushDeer \u670d\u52a1\u7684 DEER_KEY \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("PushDeer \u670d\u52a1\u542f\u52a8")\r\n    DEER_KEY = kwargs.get("DEER_KEY", push_config.get("DEER_KEY"))\r\n\r\n    data = {\r\n        "text": title,\r\n        "desp": content,\r\n        "type": "markdown",\r\n        "pushkey": DEER_KEY,\r\n    }\r\n    url = "https://api2.pushdeer.com/message/push"\r\n    if push_config.get("DEER_URL"):\r\n        url = push_config.get("DEER_URL")\r\n    if kwargs.get("DEER_URL"):\r\n        url = kwargs.get("DEER_URL")\r\n\r\n    response = requests.post(url, data=data).json()\r\n\r\n    if len(response.get("content").get("result")) > 0:\r\n        print("PushDeer \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("PushDeer \u63a8\u9001\u5931\u8d25\uff01\u9519\u8bef\u4fe1\u606f\uff1a", response)\r\n\r\n\r\ndef chat(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u901a\u8fc7Chat \u63a8\u9001\u6d88\u606f\r\n    """\r\n    if not (\r\n        (kwargs.get("CHAT_URL") and kwargs.get("CHAT_TOKEN"))\r\n        or (push_config.get("CHAT_URL") and push_config.get("CHAT_TOKEN"))\r\n    ):\r\n        print("chat \u670d\u52a1\u7684 CHAT_URL\u6216CHAT_TOKEN \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("chat \u670d\u52a1\u542f\u52a8")\r\n    if kwargs.get("CHAT_URL") and kwargs.get("CHAT_TOKEN"):\r\n        CHAT_URL = kwargs.get("CHAT_URL")\r\n        CHAT_TOKEN = kwargs.get("CHAT_TOKEN")\r\n    else:\r\n        CHAT_URL = push_config.get("CHAT_URL")\r\n        CHAT_TOKEN = push_config.get("CHAT_TOKEN")\r\n\r\n    data = "payload=" + json.dumps({"text": title + "\\n" + content})\r\n    url = CHAT_URL + CHAT_TOKEN\r\n    response = requests.post(url, data=data)\r\n\r\n    if response.status_code == 200:\r\n        print("Chat \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("Chat \u63a8\u9001\u5931\u8d25\uff01\u9519\u8bef\u4fe1\u606f\uff1a", response)\r\n\r\n\r\ndef pushplus_bot(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u901a\u8fc7 push+ \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (kwargs.get("PUSH_PLUS_TOKEN") or push_config.get("PUSH_PLUS_TOKEN")):\r\n        print("PUSHPLUS \u670d\u52a1\u7684 PUSH_PLUS_TOKEN \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("PUSHPLUS \u670d\u52a1\u542f\u52a8")\r\n    PUSH_PLUS_TOKEN = kwargs.get("PUSH_PLUS_TOKEN", push_config.get("PUSH_PLUS_TOKEN"))\r\n    PUSH_PLUS_USER = kwargs.get("PUSH_PLUS_USER", push_config.get("PUSH_PLUS_USER"))\r\n\r\n    url = "http://www.pushplus.plus/send"\r\n    data = {\r\n        "token": PUSH_PLUS_TOKEN,\r\n        "title": title,\r\n        "content": content,\r\n        "topic": PUSH_PLUS_USER,\r\n    }\r\n    body = json.dumps(data).encode(encoding="utf-8")\r\n    headers = {"Content-Type": "application/json"}\r\n    response = requests.post(url=url, data=body, headers=headers).json()\r\n\r\n    if response["code"] == 200:\r\n        print("PUSHPLUS \u63a8\u9001\u6210\u529f\uff01")\r\n\r\n    else:\r\n        url_old = "http://pushplus.hxtrip.com/send"\r\n        headers["Accept"] = "application/json"\r\n        response = requests.post(url=url_old, data=body, headers=headers).json()\r\n\r\n        if response["code"] == 200:\r\n            print("PUSHPLUS(hxtrip) \u63a8\u9001\u6210\u529f\uff01")\r\n\r\n        else:\r\n            print("PUSHPLUS \u63a8\u9001\u5931\u8d25\uff01")\r\n\r\n\r\ndef qmsg_bot(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 qmsg \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (\r\n        (kwargs.get("QMSG_KEY") and kwargs.get("QMSG_TYPE"))\r\n        or (push_config.get("QMSG_KEY") and push_config.get("QMSG_TYPE"))\r\n    ):\r\n        print("qmsg \u7684 QMSG_KEY \u6216\u8005 QMSG_TYPE \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("qmsg \u670d\u52a1\u542f\u52a8")\r\n    if kwargs.get("QMSG_KEY") and kwargs.get("QMSG_TYPE"):\r\n        QMSG_KEY = kwargs.get("QMSG_KEY")\r\n        QMSG_TYPE = kwargs.get("QMSG_TYPE")\r\n    else:\r\n        QMSG_KEY = push_config.get("QMSG_KEY")\r\n        QMSG_TYPE = push_config.get("QMSG_TYPE")\r\n\r\n    url = f"https://qmsg.zendee.cn/{QMSG_TYPE}/{QMSG_KEY}"\r\n    payload = {"msg": f\'{title}\\n\\n{content.replace("----", "-")}\'.encode("utf-8")}\r\n    response = requests.post(url=url, params=payload).json()\r\n\r\n    if response["code"] == 0:\r\n        print("qmsg \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print(f\'qmsg \u63a8\u9001\u5931\u8d25\uff01{response["reason"]}\')\r\n\r\n\r\ndef wecom_app(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u901a\u8fc7 \u4f01\u4e1a\u5fae\u4fe1 APP \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (kwargs.get("QYWX_AM") or push_config.get("QYWX_AM")):\r\n        print("QYWX_AM \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    QYWX_AM = kwargs.get("QYWX_AM", push_config.get("QYWX_AM"))\r\n    QYWX_AM_AY = re.split(",", QYWX_AM)\r\n    if 4 < len(QYWX_AM_AY) > 5:\r\n        print("QYWX_AM \u8bbe\u7f6e\u9519\u8bef!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("\u4f01\u4e1a\u5fae\u4fe1 APP \u670d\u52a1\u542f\u52a8")\r\n\r\n    corpid = QYWX_AM_AY[0]\r\n    corpsecret = QYWX_AM_AY[1]\r\n    touser = QYWX_AM_AY[2]\r\n    agentid = QYWX_AM_AY[3]\r\n    try:\r\n        media_id = QYWX_AM_AY[4]\r\n    except IndexError:\r\n        media_id = ""\r\n    wx = WeCom(corpid, corpsecret, agentid)\r\n    # \u5982\u679c\u6ca1\u6709\u914d\u7f6e media_id \u9ed8\u8ba4\u5c31\u4ee5 text \u65b9\u5f0f\u53d1\u9001\r\n    if not media_id:\r\n        message = title + "\\n\\n" + content\r\n        response = wx.send_text(message, touser)\r\n    else:\r\n        response = wx.send_mpnews(title, content, media_id, touser)\r\n\r\n    if response == "ok":\r\n        print("\u4f01\u4e1a\u5fae\u4fe1\u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("\u4f01\u4e1a\u5fae\u4fe1\u63a8\u9001\u5931\u8d25\uff01\u9519\u8bef\u4fe1\u606f\u5982\u4e0b\uff1a\\n", response)\r\n\r\n\r\nclass WeCom:\r\n    def __init__(self, corpid, corpsecret, agentid):\r\n        self.CORPID = corpid\r\n        self.CORPSECRET = corpsecret\r\n        self.AGENTID = agentid\r\n        self.ORIGIN = "https://qyapi.weixin.qq.com"\r\n        if push_config.get("QYWX_ORIGIN"):\r\n            self.ORIGIN = push_config.get("QYWX_ORIGIN")\r\n\r\n    def get_access_token(self):\r\n        url = f"{self.ORIGIN}/cgi-bin/gettoken"\r\n        values = {\r\n            "corpid": self.CORPID,\r\n            "corpsecret": self.CORPSECRET,\r\n        }\r\n        req = requests.post(url, params=values)\r\n        data = json.loads(req.text)\r\n        return data["access_token"]\r\n\r\n    def send_text(self, message, touser="@all"):\r\n        send_url = (\r\n            f"{self.ORIGIN}/cgi-bin/message/send?access_token={self.get_access_token()}"\r\n        )\r\n        send_values = {\r\n            "touser": touser,\r\n            "msgtype": "text",\r\n            "agentid": self.AGENTID,\r\n            "text": {"content": message},\r\n            "safe": "0",\r\n        }\r\n        send_msges = bytes(json.dumps(send_values), "utf-8")\r\n        respone = requests.post(send_url, send_msges)\r\n        respone = respone.json()\r\n        return respone["errmsg"]\r\n\r\n    def send_mpnews(self, title, message, media_id, touser="@all"):\r\n        send_url = (\r\n            f"{self.ORIGIN}/cgi-bin/message/send?access_token={self.get_access_token()}"\r\n        )\r\n        send_values = {\r\n            "touser": touser,\r\n            "msgtype": "mpnews",\r\n            "agentid": self.AGENTID,\r\n            "mpnews": {\r\n                "articles": [\r\n                    {\r\n                        "title": title,\r\n                        "thumb_media_id": media_id,\r\n                        "author": "Author",\r\n                        "content_source_url": "",\r\n                        "content": message.replace("\\n", "<br/>"),\r\n                        "digest": message,\r\n                    }\r\n                ]\r\n            },\r\n        }\r\n        send_msges = bytes(json.dumps(send_values), "utf-8")\r\n        respone = requests.post(send_url, send_msges)\r\n        respone = respone.json()\r\n        return respone["errmsg"]\r\n\r\n\r\ndef wecom_bot(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u901a\u8fc7 \u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (kwargs.get("QYWX_KEY") or push_config.get("QYWX_KEY")):\r\n        print("\u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba \u670d\u52a1\u7684 QYWX_KEY \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("\u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba\u670d\u52a1\u542f\u52a8")\r\n    QYWX_KEY = kwargs.get("QYWX_KEY", push_config.get("QYWX_KEY"))\r\n\r\n    origin = "https://qyapi.weixin.qq.com"\r\n    if push_config.get("QYWX_ORIGIN"):\r\n        origin = push_config.get("QYWX_ORIGIN")\r\n    if kwargs.get("QYWX_ORIGIN"):\r\n        origin = kwargs.get("QYWX_ORIGIN")\r\n\r\n    url = f"{origin}/cgi-bin/webhook/send?key={QYWX_KEY}"\r\n    headers = {"Content-Type": "application/json;charset=utf-8"}\r\n    data = {"msgtype": "text", "text": {"content": f"{title}\\n\\n{content}"}}\r\n    response = requests.post(\r\n        url=url, data=json.dumps(data), headers=headers, timeout=15\r\n    ).json()\r\n\r\n    if response["errcode"] == 0:\r\n        print("\u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba\u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("\u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba\u63a8\u9001\u5931\u8d25\uff01")\r\n\r\n\r\ndef telegram_bot(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 telegram \u673a\u5668\u4eba \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (\r\n        (kwargs.get("TG_BOT_TOKEN") and kwargs.get("TG_USER_ID"))\r\n        or (push_config.get("TG_BOT_TOKEN") and push_config.get("TG_USER_ID"))\r\n    ):\r\n        print("tg \u670d\u52a1\u7684 TG_BOT_TOKEN \u6216\u8005 TG_USER_ID \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("tg \u670d\u52a1\u542f\u52a8")\r\n    if kwargs.get("TG_BOT_TOKEN") and kwargs.get("TG_USER_ID"):\r\n        TG_BOT_TOKEN = kwargs.get("TG_BOT_TOKEN")\r\n        TG_USER_ID = kwargs.get("TG_USER_ID")\r\n    else:\r\n        TG_BOT_TOKEN = push_config.get("TG_BOT_TOKEN")\r\n        TG_USER_ID = push_config.get("TG_USER_ID")\r\n\r\n    if kwargs.get("TG_API_HOST") or push_config.get("TG_API_HOST"):\r\n        TG_API_HOST = kwargs.get("TG_API_HOST", push_config.get("TG_API_HOST"))\r\n        url = f"{TG_API_HOST}/bot{TG_BOT_TOKEN}/sendMessage"\r\n    else:\r\n        url = f"https://api.telegram.org/bot{TG_BOT_TOKEN}/sendMessage"\r\n    headers = {"Content-Type": "application/x-www-form-urlencoded"}\r\n    payload = {\r\n        "chat_id": str(TG_USER_ID),\r\n        "text": f"{title}\\n\\n{content}",\r\n        "disable_web_page_preview": "true",\r\n    }\r\n    proxies = None\r\n    if not (\r\n        (kwargs.get("TG_PROXY_HOST") and kwargs.get("TG_PROXY_PORT"))\r\n        or (push_config.get("TG_PROXY_HOST") and push_config.get("TG_PROXY_PORT"))\r\n    ):\r\n        if kwargs.get("TG_PROXY_HOST") and kwargs.get("TG_PROXY_PORT"):\r\n            TG_PROXY_HOST = kwargs.get("TG_PROXY_HOST")\r\n            TG_PROXY_PORT = kwargs.get("TG_PROXY_PORT")\r\n        else:\r\n            TG_PROXY_HOST = kwargs.get("TG_PROXY_HOST")\r\n            TG_PROXY_PORT = kwargs.get("TG_PROXY_PORT")\r\n        if kwargs.get("TG_PROXY_AUTH") or push_config.get("TG_PROXY_AUTH"):\r\n            TG_PROXY_AUTH = kwargs.get(\r\n                "TG_PROXY_AUTH", push_config.get("TG_PROXY_AUTH")\r\n            )\r\n        if TG_PROXY_AUTH is not None and "@" not in TG_PROXY_HOST:\r\n            TG_PROXY_HOST = TG_PROXY_AUTH + "@" + TG_PROXY_HOST\r\n        proxyStr = "http://{}:{}".format(TG_PROXY_HOST, TG_PROXY_PORT)\r\n        proxies = {"http": proxyStr, "https": proxyStr}\r\n    response = requests.post(\r\n        url=url, headers=headers, params=payload, proxies=proxies\r\n    ).json()\r\n\r\n    if response["ok"]:\r\n        print("tg \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print("tg \u63a8\u9001\u5931\u8d25\uff01")\r\n\r\n\r\ndef aibotk(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 \u667a\u80fd\u5fae\u79d8\u4e66 \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (\r\n        (\r\n            kwargs.get("AIBOTK_KEY")\r\n            and kwargs.get("AIBOTK_TYPE")\r\n            and kwargs.get("AIBOTK_NAME")\r\n        )\r\n        or (\r\n            push_config.get("AIBOTK_KEY")\r\n            and push_config.get("AIBOTK_TYPE")\r\n            and push_config.get("AIBOTK_NAME")\r\n        )\r\n    ):\r\n        print(\r\n            "\u667a\u80fd\u5fae\u79d8\u4e66 \u7684 AIBOTK_KEY \u6216\u8005 AIBOTK_TYPE \u6216\u8005 AIBOTK_NAME \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001"\r\n        )\r\n        return\r\n    print("\u667a\u80fd\u5fae\u79d8\u4e66 \u670d\u52a1\u542f\u52a8")\r\n    if (\r\n        kwargs.get("AIBOTK_KEY")\r\n        and kwargs.get("AIBOTK_TYPE")\r\n        and kwargs.get("AIBOTK_NAME")\r\n    ):\r\n        AIBOTK_KEY = kwargs.get("AIBOTK_KEY")\r\n        AIBOTK_TYPE = kwargs.get("AIBOTK_TYPE")\r\n        AIBOTK_NAME = kwargs.get("AIBOTK_NAME")\r\n    else:\r\n        AIBOTK_KEY = push_config.get("AIBOTK_KEY")\r\n        AIBOTK_TYPE = push_config.get("AIBOTK_TYPE")\r\n        AIBOTK_NAME = push_config.get("AIBOTK_NAME")\r\n    if AIBOTK_TYPE == "room":\r\n        url = "https://api-bot.aibotk.com/openapi/v1/chat/room"\r\n        data = {\r\n            "apiKey": AIBOTK_KEY,\r\n            "roomName": AIBOTK_NAME,\r\n            "message": {"type": 1, "content": f"\u3010\u9752\u9f99\u5feb\u8baf\u3011\\n\\n{title}\\n{content}"},\r\n        }\r\n    else:\r\n        url = "https://api-bot.aibotk.com/openapi/v1/chat/contact"\r\n        data = {\r\n            "apiKey": AIBOTK_KEY,\r\n            "name": AIBOTK_NAME,\r\n            "message": {"type": 1, "content": f"\u3010\u9752\u9f99\u5feb\u8baf\u3011\\n\\n{title}\\n{content}"},\r\n        }\r\n    body = json.dumps(data).encode(encoding="utf-8")\r\n    headers = {"Content-Type": "application/json"}\r\n    response = requests.post(url=url, data=body, headers=headers).json()\r\n    print(response)\r\n    if response["code"] == 0:\r\n        print("\u667a\u80fd\u5fae\u79d8\u4e66 \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print(f\'\u667a\u80fd\u5fae\u79d8\u4e66 \u63a8\u9001\u5931\u8d25\uff01{response["error"]}\')\r\n\r\n\r\ndef smtp(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 SMTP \u90ae\u4ef6 \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (\r\n        (\r\n            kwargs.get("SMTP_SERVER")\r\n            and kwargs.get("SMTP_SSL")\r\n            and kwargs.get("SMTP_EMAIL")\r\n            and kwargs.get("SMTP_PASSWORD")\r\n            and kwargs.get("SMTP_NAME")\r\n        )\r\n        or (\r\n            push_config.get("SMTP_SERVER")\r\n            and push_config.get("SMTP_SSL")\r\n            and push_config.get("SMTP_EMAIL")\r\n            and push_config.get("SMTP_PASSWORD")\r\n            and push_config.get("SMTP_NAME")\r\n        )\r\n    ):\r\n        print(\r\n            "SMTP \u90ae\u4ef6 \u7684 SMTP_SERVER \u6216\u8005 SMTP_SSL \u6216\u8005 SMTP_EMAIL \u6216\u8005 SMTP_PASSWORD \u6216\u8005 SMTP_NAME \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001"\r\n        )\r\n        return\r\n    print("SMTP \u90ae\u4ef6 \u670d\u52a1\u542f\u52a8")\r\n    if (\r\n        kwargs.get("SMTP_SERVER")\r\n        and kwargs.get("SMTP_SSL")\r\n        and kwargs.get("SMTP_EMAIL")\r\n        and kwargs.get("SMTP_PASSWORD")\r\n        and kwargs.get("SMTP_NAME")\r\n    ):\r\n        SMTP_SERVER = kwargs.get("SMTP_SERVER")\r\n        SMTP_SSL = kwargs.get("SMTP_SSL")\r\n        SMTP_EMAIL = kwargs.get("SMTP_EMAIL")\r\n        SMTP_PASSWORD = kwargs.get("SMTP_PASSWORD")\r\n        SMTP_NAME = kwargs.get("SMTP_NAME")\r\n    else:\r\n        SMTP_SERVER = push_config.get("SMTP_SERVER")\r\n        SMTP_SSL = push_config.get("SMTP_SSL")\r\n        SMTP_EMAIL = push_config.get("SMTP_EMAIL")\r\n        SMTP_PASSWORD = push_config.get("SMTP_PASSWORD")\r\n        SMTP_NAME = push_config.get("SMTP_NAME")\r\n\r\n    message = MIMEText(content, "plain", "utf-8")\r\n    message["From"] = formataddr(\r\n        (\r\n            Header(SMTP_NAME, "utf-8").encode(),\r\n            SMTP_EMAIL,\r\n        )\r\n    )\r\n    message["To"] = formataddr(\r\n        (\r\n            Header(SMTP_NAME, "utf-8").encode(),\r\n            SMTP_EMAIL,\r\n        )\r\n    )\r\n    message["Subject"] = Header(title, "utf-8")\r\n\r\n    try:\r\n        smtp_server = (\r\n            smtplib.SMTP_SSL(SMTP_SERVER)\r\n            if SMTP_SSL == "true"\r\n            else smtplib.SMTP(SMTP_SERVER)\r\n        )\r\n        smtp_server.login(SMTP_EMAIL, SMTP_PASSWORD)\r\n        smtp_server.sendmail(\r\n            SMTP_EMAIL,\r\n            SMTP_EMAIL,\r\n            message.as_bytes(),\r\n        )\r\n        smtp_server.close()\r\n        print("SMTP \u90ae\u4ef6 \u63a8\u9001\u6210\u529f\uff01")\r\n    except Exception as e:\r\n        print(f"SMTP \u90ae\u4ef6 \u63a8\u9001\u5931\u8d25\uff01{e}")\r\n\r\n\r\ndef pushme(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 PushMe \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (kwargs.get("PUSHME_KEY") or push_config.get("PUSHME_KEY")):\r\n        print("PushMe \u670d\u52a1\u7684 PUSHME_KEY \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("PushMe \u670d\u52a1\u542f\u52a8")\r\n    PUSHME_KEY = kwargs.get("PUSHME_KEY", push_config.get("PUSHME_KEY"))\r\n\r\n    url = f"https://push.i-i.me/?push_key={PUSHME_KEY}"\r\n    data = {\r\n        "title": title,\r\n        "content": content,\r\n    }\r\n    response = requests.post(url, data=data)\r\n\r\n    if response.status_code == 200 and response.text == "success":\r\n        print("PushMe \u63a8\u9001\u6210\u529f\uff01")\r\n    else:\r\n        print(f"PushMe \u63a8\u9001\u5931\u8d25\uff01{response.status_code} {response.text}")\r\n\r\n\r\ndef chronocat(title: str, content: str, **kwargs) -> None:\r\n    """\r\n    \u4f7f\u7528 CHRONOCAT \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not (\r\n        (\r\n            push_config.get("CHRONOCAT_URL")\r\n            and push_config.get("CHRONOCAT_QQ")\r\n            and push_config.get("CHRONOCAT_TOKEN")\r\n        )\r\n        or (\r\n            push_config.get("CHRONOCAT_URL")\r\n            and push_config.get("CHRONOCAT_QQ")\r\n            and push_config.get("CHRONOCAT_TOKEN")\r\n        )\r\n    ):\r\n        print("CHRONOCAT \u670d\u52a1\u7684 CHRONOCAT_URL \u6216 CHRONOCAT_QQ \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("CHRONOCAT \u670d\u52a1\u542f\u52a8")\r\n    if (\r\n        kwargs.get("CHRONOCAT_URL")\r\n        and kwargs.get("CHRONOCAT_QQ")\r\n        and kwargs.get("CHRONOCAT_TOKEN")\r\n    ):\r\n        CHRONOCAT_URL = kwargs.get("CHRONOCAT_URL")\r\n        CHRONOCAT_QQ = kwargs.get("CHRONOCAT_QQ")\r\n        CHRONOCAT_TOKEN = kwargs.get("CHRONOCAT_TOKEN")\r\n    else:\r\n        CHRONOCAT_URL = push_config.get("CHRONOCAT_URL")\r\n        CHRONOCAT_QQ = push_config.get("CHRONOCAT_QQ")\r\n        CHRONOCAT_TOKEN = push_config.get("CHRONOCAT_TOKEN")\r\n\r\n    user_ids = re.findall(r"user_id=(\\d+)", CHRONOCAT_QQ)\r\n    group_ids = re.findall(r"group_id=(\\d+)", CHRONOCAT_QQ)\r\n\r\n    url = f"{CHRONOCAT_URL}/api/message/send"\r\n    headers = {\r\n        "Content-Type": "application/json",\r\n        "Authorization": f"Bearer {CHRONOCAT_TOKEN}",\r\n    }\r\n\r\n    for chat_type, ids in [(1, user_ids), (2, group_ids)]:\r\n        if not ids:\r\n            continue\r\n        for chat_id in ids:\r\n            data = {\r\n                "peer": {"chatType": chat_type, "peerUin": chat_id},\r\n                "elements": [\r\n                    {\r\n                        "elementType": 1,\r\n                        "textElement": {"content": f"{title}\\n\\n{content}"},\r\n                    }\r\n                ],\r\n            }\r\n            response = requests.post(url, headers=headers, data=json.dumps(data))\r\n            if response.status_code == 200:\r\n                if chat_type == 1:\r\n                    print(f"QQ\u4e2a\u4eba\u6d88\u606f:{ids}\u63a8\u9001\u6210\u529f\uff01")\r\n                else:\r\n                    print(f"QQ\u7fa4\u6d88\u606f:{ids}\u63a8\u9001\u6210\u529f\uff01")\r\n            else:\r\n                if chat_type == 1:\r\n                    print(f"QQ\u4e2a\u4eba\u6d88\u606f:{ids}\u63a8\u9001\u5931\u8d25\uff01")\r\n                else:\r\n                    print(f"QQ\u7fa4\u6d88\u606f:{ids}\u63a8\u9001\u5931\u8d25\uff01")\r\n\r\n\r\ndef parse_headers(headers):\r\n    if not headers:\r\n        return {}\r\n\r\n    parsed = {}\r\n    lines = headers.split("\\n")\r\n\r\n    for line in lines:\r\n        i = line.find(":")\r\n        if i == -1:\r\n            continue\r\n\r\n        key = line[:i].strip().lower()\r\n        val = line[i + 1 :].strip()\r\n        parsed[key] = parsed.get(key, "") + ", " + val if key in parsed else val\r\n\r\n    return parsed\r\n\r\n\r\ndef parse_string(input_string, value_format_fn=None):\r\n    matches = {}\r\n    pattern = r"(\\w+):\\s*((?:(?!\\n\\w+:).)*)"\r\n    regex = re.compile(pattern)\r\n    for match in regex.finditer(input_string):\r\n        key, value = match.group(1).strip(), match.group(2).strip()\r\n        try:\r\n            value = value_format_fn(value) if value_format_fn else value\r\n            json_value = json.loads(value)\r\n            matches[key] = json_value\r\n        except:\r\n            matches[key] = value\r\n    return matches\r\n\r\n\r\ndef parse_body(body, content_type, value_format_fn=None):\r\n    if not body or content_type == "text/plain":\r\n        return body\r\n\r\n    parsed = parse_string(input_string, value_format_fn)\r\n\r\n    if content_type == "application/x-www-form-urlencoded":\r\n        data = urlencode(parsed, doseq=True)\r\n        return data\r\n\r\n    if content_type == "application/json":\r\n        data = json.dumps(parsed)\r\n        return data\r\n\r\n    return parsed\r\n\r\n\r\ndef format_notify_content(url, body, title, content):\r\n    if "$title" not in url and "$title" not in body:\r\n        return {}\r\n\r\n    formatted_url = url.replace("$title", urllib.parse.quote_plus(title)).replace(\r\n        "$content", urllib.parse.quote_plus(content)\r\n    )\r\n    formatted_body = body.replace("$title", title).replace("$content", content)\r\n\r\n    return formatted_url, formatted_body\r\n\r\n\r\ndef webhook_notify(title: str, content: str) -> None:\r\n    """\r\n    \u901a\u8fc7 WEBHOOK \u63a8\u9001\u6d88\u606f\u3002\r\n    """\r\n    if not push_config.get("WEBHOOK_URL"):\r\n        print("WEBHOOK \u670d\u52a1\u7684 WEBHOOK_URL \u672a\u8bbe\u7f6e!!\\n\u53d6\u6d88\u63a8\u9001")\r\n        return\r\n    print("WEBHOOK\u670d\u52a1\u542f\u52a8")\r\n\r\n    url = f"{push_config.get(\'WEBHOOK_URL\')}"\r\n    headers = {"Content-Type": "application/json;charset=utf-8"}\r\n    data = {"title": f"{title}", "content": f"{content}"}\r\n    response = requests.post(\r\n        url=url, data=json.dumps(data), headers=headers, timeout=15\r\n    ).json()\r\n\r\n    print("WEBHOOK \u63a8\u9001\u6210\u529f\uff01")\r\n\r\ndef one() -> str:\r\n    """\r\n    \u83b7\u53d6\u4e00\u6761\u4e00\u8a00\u3002\r\n    :return:\r\n    """\r\n    url = "https://v1.hitokoto.cn/"\r\n    res = requests.get(url).json()\r\n    return res["hitokoto"] + "    ----" + res["from"]\r\n\r\n\r\ndef add_notify_function():\r\n    if push_config.get("BARK_PUSH"):\r\n        notify_function.append(bark)\r\n    if push_config.get("CONSOLE"):\r\n        notify_function.append(console)\r\n    if push_config.get("DD_BOT_TOKEN") and push_config.get("DD_BOT_SECRET"):\r\n        notify_function.append(dingding_bot)\r\n    if push_config.get("FSKEY"):\r\n        notify_function.append(feishu_bot)\r\n    if push_config.get("GOBOT_URL") and push_config.get("GOBOT_QQ"):\r\n        notify_function.append(go_cqhttp)\r\n    if push_config.get("GOTIFY_URL") and push_config.get("GOTIFY_TOKEN"):\r\n        notify_function.append(gotify)\r\n    if push_config.get("IGOT_PUSH_KEY"):\r\n        notify_function.append(iGot)\r\n    if push_config.get("PUSH_KEY"):\r\n        notify_function.append(serverJ)\r\n    if push_config.get("DEER_KEY"):\r\n        notify_function.append(pushdeer)\r\n    if push_config.get("CHAT_URL") and push_config.get("CHAT_TOKEN"):\r\n        notify_function.append(chat)\r\n    if push_config.get("PUSH_PLUS_TOKEN"):\r\n        notify_function.append(pushplus_bot)\r\n    if push_config.get("QMSG_KEY") and push_config.get("QMSG_TYPE"):\r\n        notify_function.append(qmsg_bot)\r\n    if push_config.get("QYWX_AM"):\r\n        notify_function.append(wecom_app)\r\n    if push_config.get("QYWX_KEY"):\r\n        notify_function.append(wecom_bot)\r\n    if push_config.get("TG_BOT_TOKEN") and push_config.get("TG_USER_ID"):\r\n        notify_function.append(telegram_bot)\r\n    if (\r\n        push_config.get("AIBOTK_KEY")\r\n        and push_config.get("AIBOTK_TYPE")\r\n        and push_config.get("AIBOTK_NAME")\r\n    ):\r\n        notify_function.append(aibotk)\r\n    if (\r\n        push_config.get("SMTP_SERVER")\r\n        and push_config.get("SMTP_SSL")\r\n        and push_config.get("SMTP_EMAIL")\r\n        and push_config.get("SMTP_PASSWORD")\r\n        and push_config.get("SMTP_NAME")\r\n    ):\r\n        notify_function.append(smtp)\r\n    if push_config.get("PUSHME_KEY"):\r\n        notify_function.append(pushme)\r\n    if (\r\n        push_config.get("CHRONOCAT_URL")\r\n        and push_config.get("CHRONOCAT_QQ")\r\n        and push_config.get("CHRONOCAT_TOKEN")\r\n    ):\r\n        notify_function.append(chronocat)\r\n    if push_config.get("WEBHOOK_URL") and push_config.get("WEBHOOK_METHOD"):\r\n        notify_function.append(custom_notify)\r\n\r\n\r\ndef send(title: str, content: str, **kwargs) -> None:\r\n    if not content:\r\n        print(f"{title} \u63a8\u9001\u5185\u5bb9\u4e3a\u7a7a\uff01")\r\n        return\r\n\r\n    # \u6839\u636e\u6807\u9898\u8df3\u8fc7\u4e00\u4e9b\u6d88\u606f\u63a8\u9001\uff0c\u73af\u5883\u53d8\u91cf\uff1aSKIP_PUSH_TITLE \u7528\u56de\u8f66\u5206\u9694\r\n    skipTitle = os.getenv("SKIP_PUSH_TITLE")\r\n    if skipTitle:\r\n        if title in re.split("\\n", skipTitle):\r\n            print(f"{title} \u5728SKIP_PUSH_TITLE\u73af\u5883\u53d8\u91cf\u5185\uff0c\u8df3\u8fc7\u63a8\u9001\uff01")\r\n            return\r\n\r\n    hitokoto = push_config.get("HITOKOTO")\r\n    content += "\\n\\n" + one() if hitokoto else ""\r\n\r\n    add_notify_function()\r\n    ts = [\r\n        threading.Thread(\r\n            target=mode, args=(title, content), kwargs=kwargs, name=mode.__name__\r\n        )\r\n        for mode in notify_function\r\n    ]\r\n    [t.start() for t in ts]\r\n    [t.join() for t in ts]\r\n\r\n\r\ndef main():\r\n    send("title", "content")\r\n\r\n\r\nif __name__ == "__main__":\r\n    main()\n'})}),"\n",(0,s.jsx)(r.h3,{id:"sendnotifyjs\u6587\u4ef6\u5185\u5bb9",children:"sendNotify.js\u6587\u4ef6\u5185\u5bb9"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"/*\r\n * @Author: lxk0301 https://gitee.com/lxk0301\r\n * @Date: 2020-08-19 16:12:40\r\n * @Last Modified by: whyour\r\n * @Last Modified time: 2021-5-1 15:00:54\r\n * sendNotify \u63a8\u9001\u901a\u77e5\u529f\u80fd\r\n * @param text \u901a\u77e5\u5934\r\n * @param desp \u901a\u77e5\u4f53\r\n * @param params \u67d0\u4e9b\u63a8\u9001\u901a\u77e5\u65b9\u5f0f\u70b9\u51fb\u5f39\u7a97\u53ef\u8df3\u8f6c, \u4f8b\uff1a{ url: 'https://abc.com' }\r\n * @param author \u4f5c\u8005\u4ed3\u5e93\u7b49\u4fe1\u606f  \u4f8b\uff1a`\u672c\u901a\u77e5 By\uff1ahttps://github.com/whyour/qinglong`\r\n */\r\n\r\nconst querystring = require('querystring');\r\nconst got = require('got');\r\nconst $ = new Env();\r\nconst timeout = 15000; // \u8d85\u65f6\u65f6\u95f4(\u5355\u4f4d\u6beb\u79d2)\r\n// =======================================gotify\u901a\u77e5\u8bbe\u7f6e\u533a\u57df==============================================\r\n// gotify_url \u586b\u5199gotify\u5730\u5740,\u5982https://push.example.de:8080\r\n// gotify_token \u586b\u5199gotify\u7684\u6d88\u606f\u5e94\u7528token\r\n// gotify_priority \u586b\u5199\u63a8\u9001\u6d88\u606f\u4f18\u5148\u7ea7,\u9ed8\u8ba4\u4e3a0\r\nlet GOTIFY_URL = '';\r\nlet GOTIFY_TOKEN = '';\r\nlet GOTIFY_PRIORITY = 0;\r\n// =======================================go-cqhttp\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// gobot_url \u586b\u5199\u8bf7\u6c42\u5730\u5740http://127.0.0.1/send_private_msg\r\n// gobot_token \u586b\u5199\u5728go-cqhttp\u6587\u4ef6\u8bbe\u7f6e\u7684\u8bbf\u95ee\u5bc6\u94a5\r\n// gobot_qq \u586b\u5199\u63a8\u9001\u5230\u4e2a\u4ebaQQ\u6216\u8005QQ\u7fa4\u53f7\r\n// go-cqhttp\u76f8\u5173API https://docs.go-cqhttp.org/api\r\nlet GOBOT_URL = ''; // \u63a8\u9001\u5230\u4e2a\u4ebaQQ: http://127.0.0.1/send_private_msg  \u7fa4\uff1ahttp://127.0.0.1/send_group_msg\r\nlet GOBOT_TOKEN = ''; // \u8bbf\u95ee\u5bc6\u94a5\r\nlet GOBOT_QQ = ''; // \u5982\u679cGOBOT_URL\u8bbe\u7f6e /send_private_msg \u5219\u9700\u8981\u586b\u5165 user_id=\u4e2a\u4ebaQQ \u76f8\u53cd\u5982\u679c\u662f /send_group_msg \u5219\u9700\u8981\u586b\u5165 group_id=QQ\u7fa4\r\n\r\n// =======================================\u5fae\u4fe1server\u9171\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u6b64\u5904\u586b\u4f60\u7533\u8bf7\u7684SCKEY.\r\n// (\u73af\u5883\u53d8\u91cf\u540d PUSH_KEY)\r\nlet SCKEY = '';\r\n\r\n// =======================================PushDeer\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u6b64\u5904\u586b\u4f60\u7533\u8bf7\u7684PushDeer KEY.\r\n// (\u73af\u5883\u53d8\u91cf\u540d DEER_KEY)\r\nlet PUSHDEER_KEY = '';\r\nlet PUSHDEER_URL = '';\r\n\r\n// =======================================Synology Chat\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u6b64\u5904\u586b\u4f60\u7533\u8bf7\u7684CHAT_URL\u4e0eCHAT_TOKEN\r\n// (\u73af\u5883\u53d8\u91cf\u540d CHAT_URL CHAT_TOKEN)\r\nlet CHAT_URL = '';\r\nlet CHAT_TOKEN = '';\r\n\r\n// =======================================Bark App\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u6b64\u5904\u586b\u4f60BarkAPP\u7684\u4fe1\u606f(IP/\u8bbe\u5907\u7801\uff0c\u4f8b\u5982\uff1ahttps://api.day.app/XXXXXXXX)\r\nlet BARK_PUSH = '';\r\n// BARK app\u63a8\u9001\u56fe\u6807,\u81ea\u5b9a\u4e49\u63a8\u9001\u56fe\u6807(\u9700iOS15\u6216\u4ee5\u4e0a)\r\nlet BARK_ICON = 'https://qn.whyour.cn/logo.png';\r\n// BARK app\u63a8\u9001\u94c3\u58f0,\u94c3\u58f0\u5217\u8868\u53bbAPP\u67e5\u770b\u590d\u5236\u586b\u5199\r\nlet BARK_SOUND = '';\r\n// BARK app\u63a8\u9001\u6d88\u606f\u7684\u5206\u7ec4, \u9ed8\u8ba4\u4e3a\"QingLong\"\r\nlet BARK_GROUP = 'QingLong';\r\n// BARK app\u63a8\u9001\u6d88\u606f\u7684\u65f6\u6548\u6027, \u9ed8\u8ba4\u4e3a\"active\"\r\nlet BARK_LEVEL = 'active';\r\n// BARK app\u63a8\u9001\u6d88\u606f\u7684\u8df3\u8f6cURL\r\nlet BARK_URL = '';\r\n\r\n// =======================================telegram\u673a\u5668\u4eba\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u6b64\u5904\u586b\u4f60telegram bot \u7684Token\uff0ctelegram\u673a\u5668\u4eba\u901a\u77e5\u63a8\u9001\u5fc5\u586b\u9879.\u4f8b\u5982\uff1a1077xxx4424:AAFjv0FcqxxxxxxgEMGfi22B4yh15R5uw\r\n// (\u73af\u5883\u53d8\u91cf\u540d TG_BOT_TOKEN)\r\nlet TG_BOT_TOKEN = '';\r\n// \u6b64\u5904\u586b\u4f60\u63a5\u6536\u901a\u77e5\u6d88\u606f\u7684telegram\u7528\u6237\u7684id\uff0ctelegram\u673a\u5668\u4eba\u901a\u77e5\u63a8\u9001\u5fc5\u586b\u9879.\u4f8b\u5982\uff1a129xxx206\r\n// (\u73af\u5883\u53d8\u91cf\u540d TG_USER_ID)\r\nlet TG_USER_ID = '';\r\n// tg\u63a8\u9001HTTP\u4ee3\u7406\u8bbe\u7f6e(\u4e0d\u61c2\u53ef\u5ffd\u7565,telegram\u673a\u5668\u4eba\u901a\u77e5\u63a8\u9001\u529f\u80fd\u4e2d\u975e\u5fc5\u586b)\r\nlet TG_PROXY_HOST = ''; // \u4f8b\u5982:127.0.0.1(\u73af\u5883\u53d8\u91cf\u540d:TG_PROXY_HOST)\r\nlet TG_PROXY_PORT = ''; // \u4f8b\u5982:1080(\u73af\u5883\u53d8\u91cf\u540d:TG_PROXY_PORT)\r\nlet TG_PROXY_AUTH = ''; // tg\u4ee3\u7406\u914d\u7f6e\u8ba4\u8bc1\u53c2\u6570\r\n// Telegram api\u81ea\u5efa\u7684\u53cd\u5411\u4ee3\u7406\u5730\u5740(\u4e0d\u61c2\u53ef\u5ffd\u7565,telegram\u673a\u5668\u4eba\u901a\u77e5\u63a8\u9001\u529f\u80fd\u4e2d\u975e\u5fc5\u586b),\u9ed8\u8ba4tg\u5b98\u65b9api(\u73af\u5883\u53d8\u91cf\u540d:TG_API_HOST)\r\nlet TG_API_HOST = 'https://api.telegram.org';\r\n// =======================================\u9489\u9489\u673a\u5668\u4eba\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u6b64\u5904\u586b\u4f60\u9489\u9489 bot \u7684webhook\uff0c\u4f8b\u5982\uff1a5a544165465465645d0f31dca676e7bd07415asdasd\r\n// (\u73af\u5883\u53d8\u91cf\u540d DD_BOT_TOKEN)\r\nlet DD_BOT_TOKEN = '';\r\n// \u5bc6\u94a5\uff0c\u673a\u5668\u4eba\u5b89\u5168\u8bbe\u7f6e\u9875\u9762\uff0c\u52a0\u7b7e\u4e00\u680f\u4e0b\u9762\u663e\u793a\u7684SEC\u5f00\u5934\u7684\u5b57\u7b26\u4e32\r\nlet DD_BOT_SECRET = '';\r\n\r\n// =======================================\u4f01\u4e1a\u5fae\u4fe1\u57fa\u7840\u8bbe\u7f6e===========================================\r\n// \u4f01\u4e1a\u5fae\u4fe1\u53cd\u5411\u4ee3\u7406\u5730\u5740\r\n// (\u73af\u5883\u53d8\u91cf\u540d QYWX_ORIGIN)\r\nlet QYWX_ORIGIN = '';\r\n// =======================================\u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u6b64\u5904\u586b\u4f60\u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba\u7684 webhook(\u8be6\u89c1\u6587\u6863 https://work.weixin.qq.com/api/doc/90000/90136/91770)\uff0c\u4f8b\u5982\uff1a693a91f6-7xxx-4bc4-97a0-0ec2sifa5aaa\r\n// (\u73af\u5883\u53d8\u91cf\u540d QYWX_KEY)\r\nlet QYWX_KEY = '';\r\n\r\n// =======================================\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u6d88\u606f\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n/*\r\n \u6b64\u5904\u586b\u4f60\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u6d88\u606f\u7684\u503c(\u8be6\u89c1\u6587\u6863 https://work.weixin.qq.com/api/doc/90000/90135/90236)\r\n \u73af\u5883\u53d8\u91cf\u540d QYWX_AM\u4f9d\u6b21\u586b\u5165 corpid,corpsecret,touser(\u6ce8:\u591a\u4e2a\u6210\u5458ID\u4f7f\u7528|\u9694\u5f00),agentid,\u6d88\u606f\u7c7b\u578b(\u9009\u586b,\u4e0d\u586b\u9ed8\u8ba4\u6587\u672c\u6d88\u606f\u7c7b\u578b)\r\n \u6ce8\u610f\u7528,\u53f7\u9694\u5f00(\u82f1\u6587\u8f93\u5165\u6cd5\u7684\u9017\u53f7)\uff0c\u4f8b\u5982\uff1awwcff56746d9adwers,B-791548lnzXBE6_BWfxdf3kSTMJr9vFEPKAbh6WERQ,mingcheng,1000001,2COXgjH2UIfERF2zxrtUOKgQ9XklUqMdGSWLBoW_lSDAdafat\r\n \u53ef\u9009\u63a8\u9001\u6d88\u606f\u7c7b\u578b(\u63a8\u8350\u4f7f\u7528\u56fe\u6587\u6d88\u606f\uff08mpnews\uff09):\r\n - \u6587\u672c\u5361\u7247\u6d88\u606f: 0 (\u6570\u5b57\u96f6)\r\n - \u6587\u672c\u6d88\u606f: 1 (\u6570\u5b57\u4e00)\r\n - \u56fe\u6587\u6d88\u606f\uff08mpnews\uff09: \u7d20\u6750\u5e93\u56fe\u7247id, \u53ef\u67e5\u770b\u6b64\u6559\u7a0b(http://note.youdao.com/s/HMiudGkb)\u6216\u8005(https://note.youdao.com/ynoteshare1/index.html?id=1a0c8aff284ad28cbd011b29b3ad0191&type=note)\r\n */\r\nlet QYWX_AM = '';\r\n\r\n// =======================================iGot\u805a\u5408\u63a8\u9001\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u6b64\u5904\u586b\u60a8iGot\u7684\u4fe1\u606f(\u63a8\u9001key\uff0c\u4f8b\u5982\uff1ahttps://push.hellyw.com/XXXXXXXX)\r\nlet IGOT_PUSH_KEY = '';\r\n\r\n// =======================================push+\u8bbe\u7f6e\u533a\u57df=======================================\r\n// \u5b98\u65b9\u6587\u6863\uff1ahttp://www.pushplus.plus/\r\n// PUSH_PLUS_TOKEN\uff1a\u5fae\u4fe1\u626b\u7801\u767b\u5f55\u540e\u4e00\u5bf9\u4e00\u63a8\u9001\u6216\u4e00\u5bf9\u591a\u63a8\u9001\u4e0b\u9762\u7684token(\u60a8\u7684Token)\uff0c\u4e0d\u63d0\u4f9bPUSH_PLUS_USER\u5219\u9ed8\u8ba4\u4e3a\u4e00\u5bf9\u4e00\u63a8\u9001\r\n// PUSH_PLUS_USER\uff1a \u4e00\u5bf9\u591a\u63a8\u9001\u7684\u201c\u7fa4\u7ec4\u7f16\u7801\u201d\uff08\u4e00\u5bf9\u591a\u63a8\u9001\u4e0b\u9762->\u60a8\u7684\u7fa4\u7ec4(\u5982\u65e0\u5219\u65b0\u5efa)->\u7fa4\u7ec4\u7f16\u7801\uff0c\u5982\u679c\u60a8\u662f\u521b\u5efa\u7fa4\u7ec4\u4eba\u3002\u4e5f\u9700\u70b9\u51fb\u201c\u67e5\u770b\u4e8c\u7ef4\u7801\u201d\u626b\u63cf\u7ed1\u5b9a\uff0c\u5426\u5219\u4e0d\u80fd\u63a5\u53d7\u7fa4\u7ec4\u6d88\u606f\u63a8\u9001\uff09\r\nlet PUSH_PLUS_TOKEN = '';\r\nlet PUSH_PLUS_USER = '';\r\n\r\n// =======================================\u667a\u80fd\u5fae\u79d8\u4e66\u8bbe\u7f6e\u533a\u57df=======================================\r\n// \u5b98\u65b9\u6587\u6863\uff1ahttp://wechat.aibotk.com/docs/about\r\n// AIBOTK_KEY\uff1a \u586b\u5199\u667a\u80fd\u5fae\u79d8\u4e66\u4e2a\u4eba\u4e2d\u5fc3\u7684apikey\r\n// AIBOTK_TYPE\uff1a\u586b\u5199\u53d1\u9001\u7684\u76ee\u6807 room \u6216 contact, \u586b\u5176\u4ed6\u7684\u4e0d\u751f\u6548\r\n// AIBOTK_NAME: \u586b\u5199\u7fa4\u540d\u6216\u7528\u6237\u6635\u79f0\uff0c\u548c\u4e0a\u9762\u7684type\u7c7b\u578b\u8981\u5bf9\u5e94\r\nlet AIBOTK_KEY = '';\r\nlet AIBOTK_TYPE = '';\r\nlet AIBOTK_NAME = '';\r\n\r\n// =======================================\u98de\u4e66\u673a\u5668\u4eba\u8bbe\u7f6e\u533a\u57df=======================================\r\n// \u5b98\u65b9\u6587\u6863\uff1ahttps://www.feishu.cn/hc/zh-CN/articles/360024984973\r\n// FSKEY \u98de\u4e66\u673a\u5668\u4eba\u7684 FSKEY\r\nlet FSKEY = '';\r\n\r\n// =======================================SMTP \u90ae\u4ef6\u8bbe\u7f6e\u533a\u57df=======================================\r\n// SMTP_SERVICE: \u90ae\u7bb1\u670d\u52a1\u540d\u79f0\uff0c\u6bd4\u5982126\u3001163\u3001Gmail\u3001QQ\u7b49\uff0c\u652f\u6301\u5217\u8868 https://github.com/nodemailer/nodemailer/blob/master/lib/well-known/services.json\r\n// SMTP_EMAIL: \u586b\u5199 SMTP \u6536\u53d1\u4ef6\u90ae\u7bb1\uff0c\u901a\u77e5\u5c06\u4f1a\u7531\u81ea\u5df1\u53d1\u7ed9\u81ea\u5df1\r\n// SMTP_PASSWORD: \u586b\u5199 SMTP \u767b\u5f55\u5bc6\u7801\uff0c\u4e5f\u53ef\u80fd\u4e3a\u7279\u6b8a\u53e3\u4ee4\uff0c\u89c6\u5177\u4f53\u90ae\u4ef6\u670d\u52a1\u5546\u8bf4\u660e\u800c\u5b9a\r\n// SMTP_NAME: \u586b\u5199 SMTP \u6536\u53d1\u4ef6\u4eba\u59d3\u540d\uff0c\u53ef\u968f\u610f\u586b\u5199\r\nlet SMTP_SERVICE = '';\r\nlet SMTP_EMAIL = '';\r\nlet SMTP_PASSWORD = '';\r\nlet SMTP_NAME = '';\r\n\r\n// =======================================PushMe\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// \u5b98\u65b9\u6587\u6863\uff1ahttps://push.i-i.me/\r\n// \u6b64\u5904\u586b\u4f60\u7684PushMe KEY.\r\nlet PUSHME_KEY = '';\r\n\r\n// =======================================CHRONOCAT\u901a\u77e5\u8bbe\u7f6e\u533a\u57df===========================================\r\n// CHRONOCAT_URL Red\u534f\u8bae\u8fde\u63a5\u5730\u5740 \u4f8b\uff1a http://127.0.0.1:16530\r\n// CHRONOCAT_TOKEN \u586b\u5199\u5728CHRONOCAT\u6587\u4ef6\u751f\u6210\u7684\u8bbf\u95ee\u5bc6\u94a5\r\n// CHRONOCAT_QQ \u4e2a\u4eba:user_id=\u4e2a\u4ebaQQ \u7fa4\u5219\u586b\u5165group_id=QQ\u7fa4 \u591a\u4e2a\u7528\u82f1\u6587;\u9694\u5f00\u540c\u65f6\u652f\u6301\u4e2a\u4eba\u548c\u7fa4\r\n// CHRONOCAT\u76f8\u5173API https://chronocat.vercel.app/install/docker/official/\r\nlet CHRONOCAT_URL = ''; // CHRONOCAT Red\u534f\u8bae\u8fde\u63a5\u5730\u5740\r\nlet CHRONOCAT_TOKEN = ''; // CHRONOCAT \u751f\u6210\u7684\u8bbf\u95ee\u5bc6\u94a5\r\nlet CHRONOCAT_QQ = ''; // \u4e2a\u4eba:user_id=\u4e2a\u4ebaQQ \u7fa4\u5219\u586b\u5165group_id=QQ\u7fa4 \u591a\u4e2a\u7528\u82f1\u6587;\u9694\u5f00\u540c\u65f6\u652f\u6301\u4e2a\u4eba\u548c\u7fa4 \u5982\uff1auser_id=xxx;group_id=xxxx;group_id=xxxxx\r\n\r\n// =======================================\u81ea\u5b9a\u4e49\u901a\u77e5\u8bbe\u7f6e\u533a\u57df=======================================\r\n// \u81ea\u5b9a\u4e49\u901a\u77e5 \u63a5\u6536\u56de\u8c03\u7684URL\r\nlet WEBHOOK_URL = '';\r\nlet WEBHOOK_BODY = '';\r\nlet WEBHOOK_HEADERS = '';\r\nlet WEBHOOK_METHOD = '';\r\nlet WEBHOOK_CONTENT_TYPE = '';\r\n\r\n// ==========================\u4e91\u7aef\u73af\u5883\u53d8\u91cf\u7684\u5224\u65ad\u4e0e\u63a5\u6536=========================\r\nif (process.env.GOTIFY_URL) {\r\n  GOTIFY_URL = process.env.GOTIFY_URL;\r\n}\r\nif (process.env.GOTIFY_TOKEN) {\r\n  GOTIFY_TOKEN = process.env.GOTIFY_TOKEN;\r\n}\r\nif (process.env.GOTIFY_PRIORITY) {\r\n  GOTIFY_PRIORITY = process.env.GOTIFY_PRIORITY;\r\n}\r\n\r\nif (process.env.GOBOT_URL) {\r\n  GOBOT_URL = process.env.GOBOT_URL;\r\n}\r\nif (process.env.GOBOT_TOKEN) {\r\n  GOBOT_TOKEN = process.env.GOBOT_TOKEN;\r\n}\r\nif (process.env.GOBOT_QQ) {\r\n  GOBOT_QQ = process.env.GOBOT_QQ;\r\n}\r\n\r\nif (process.env.PUSH_KEY) {\r\n  SCKEY = process.env.PUSH_KEY;\r\n}\r\n\r\nif (process.env.DEER_KEY) {\r\n  PUSHDEER_KEY = process.env.DEER_KEY;\r\n  PUSHDEER_URL = process.env.DEER_URL;\r\n}\r\n\r\nif (process.env.CHAT_URL) {\r\n  CHAT_URL = process.env.CHAT_URL;\r\n}\r\n\r\nif (process.env.CHAT_TOKEN) {\r\n  CHAT_TOKEN = process.env.CHAT_TOKEN;\r\n}\r\n\r\nif (process.env.QQ_SKEY) {\r\n  QQ_SKEY = process.env.QQ_SKEY;\r\n}\r\n\r\nif (process.env.QQ_MODE) {\r\n  QQ_MODE = process.env.QQ_MODE;\r\n}\r\n\r\nif (process.env.BARK_PUSH) {\r\n  if (\r\n    process.env.BARK_PUSH.indexOf('https') > -1 ||\r\n    process.env.BARK_PUSH.indexOf('http') > -1\r\n  ) {\r\n    // \u517c\u5bb9BARK\u81ea\u5efa\u7528\u6237\r\n    BARK_PUSH = process.env.BARK_PUSH;\r\n  } else {\r\n    BARK_PUSH = `https://api.day.app/${process.env.BARK_PUSH}`;\r\n  }\r\n  if (process.env.BARK_ICON) {\r\n    BARK_ICON = process.env.BARK_ICON;\r\n  }\r\n  if (process.env.BARK_SOUND) {\r\n    BARK_SOUND = process.env.BARK_SOUND;\r\n  }\r\n  if (process.env.BARK_GROUP) {\r\n    BARK_GROUP = process.env.BARK_GROUP;\r\n  }\r\n  if (process.env.BARK_LEVEL) {\r\n    BARK_LEVEL = process.env.BARK_LEVEL;\r\n  }\r\n  if (process.env.BARK_URL) {\r\n    BARK_URL = process.env.BARK_URL;\r\n  }\r\n} else {\r\n  if (\r\n    BARK_PUSH &&\r\n    BARK_PUSH.indexOf('https') === -1 &&\r\n    BARK_PUSH.indexOf('http') === -1\r\n  ) {\r\n    // \u517c\u5bb9BARK\u672c\u5730\u7528\u6237\u53ea\u586b\u5199\u8bbe\u5907\u7801\u7684\u60c5\u51b5\r\n    BARK_PUSH = `https://api.day.app/${BARK_PUSH}`;\r\n  }\r\n}\r\nif (process.env.TG_BOT_TOKEN) {\r\n  TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;\r\n}\r\nif (process.env.TG_USER_ID) {\r\n  TG_USER_ID = process.env.TG_USER_ID;\r\n}\r\nif (process.env.TG_PROXY_AUTH) TG_PROXY_AUTH = process.env.TG_PROXY_AUTH;\r\nif (process.env.TG_PROXY_HOST) TG_PROXY_HOST = process.env.TG_PROXY_HOST;\r\nif (process.env.TG_PROXY_PORT) TG_PROXY_PORT = process.env.TG_PROXY_PORT;\r\nif (process.env.TG_API_HOST) TG_API_HOST = process.env.TG_API_HOST;\r\n\r\nif (process.env.DD_BOT_TOKEN) {\r\n  DD_BOT_TOKEN = process.env.DD_BOT_TOKEN;\r\n  if (process.env.DD_BOT_SECRET) {\r\n    DD_BOT_SECRET = process.env.DD_BOT_SECRET;\r\n  }\r\n}\r\n\r\nif (process.env.QYWX_ORIGIN) {\r\n  QYWX_ORIGIN = process.env.QYWX_ORIGIN;\r\n} else {\r\n  QYWX_ORIGIN = 'https://qyapi.weixin.qq.com';\r\n}\r\n\r\nif (process.env.QYWX_KEY) {\r\n  QYWX_KEY = process.env.QYWX_KEY;\r\n}\r\n\r\nif (process.env.QYWX_AM) {\r\n  QYWX_AM = process.env.QYWX_AM;\r\n}\r\n\r\nif (process.env.IGOT_PUSH_KEY) {\r\n  IGOT_PUSH_KEY = process.env.IGOT_PUSH_KEY;\r\n}\r\n\r\nif (process.env.PUSH_PLUS_TOKEN) {\r\n  PUSH_PLUS_TOKEN = process.env.PUSH_PLUS_TOKEN;\r\n}\r\nif (process.env.PUSH_PLUS_USER) {\r\n  PUSH_PLUS_USER = process.env.PUSH_PLUS_USER;\r\n}\r\n\r\nif (process.env.AIBOTK_KEY) {\r\n  AIBOTK_KEY = process.env.AIBOTK_KEY;\r\n}\r\nif (process.env.AIBOTK_TYPE) {\r\n  AIBOTK_TYPE = process.env.AIBOTK_TYPE;\r\n}\r\nif (process.env.AIBOTK_NAME) {\r\n  AIBOTK_NAME = process.env.AIBOTK_NAME;\r\n}\r\n\r\nif (process.env.FSKEY) {\r\n  FSKEY = process.env.FSKEY;\r\n}\r\n\r\nif (process.env.SMTP_SERVICE) {\r\n  SMTP_SERVICE = process.env.SMTP_SERVICE;\r\n}\r\nif (process.env.SMTP_EMAIL) {\r\n  SMTP_EMAIL = process.env.SMTP_EMAIL;\r\n}\r\nif (process.env.SMTP_PASSWORD) {\r\n  SMTP_PASSWORD = process.env.SMTP_PASSWORD;\r\n}\r\nif (process.env.SMTP_NAME) {\r\n  SMTP_NAME = process.env.SMTP_NAME;\r\n}\r\nif (process.env.PUSHME_KEY) {\r\n  PUSHME_KEY = process.env.PUSHME_KEY;\r\n}\r\n\r\nif (process.env.CHRONOCAT_URL) {\r\n  CHRONOCAT_URL = process.env.CHRONOCAT_URL;\r\n}\r\nif (process.env.CHRONOCAT_QQ) {\r\n  CHRONOCAT_QQ = process.env.CHRONOCAT_QQ;\r\n}\r\nif (process.env.CHRONOCAT_TOKEN) {\r\n  CHRONOCAT_TOKEN = process.env.CHRONOCAT_TOKEN;\r\n}\r\n\r\nif (process.env.WEBHOOK_URL) {\r\n  WEBHOOK_URL = process.env.WEBHOOK_URL;\r\n}\r\nif (process.env.WEBHOOK_BODY) {\r\n  WEBHOOK_BODY = process.env.WEBHOOK_BODY;\r\n}\r\nif (process.env.WEBHOOK_HEADERS) {\r\n  WEBHOOK_HEADERS = process.env.WEBHOOK_HEADERS;\r\n}\r\nif (process.env.WEBHOOK_METHOD) {\r\n  WEBHOOK_METHOD = process.env.WEBHOOK_METHOD;\r\n}\r\nif (process.env.WEBHOOK_CONTENT_TYPE) {\r\n  WEBHOOK_CONTENT_TYPE = process.env.WEBHOOK_CONTENT_TYPE;\r\n}\r\n// ==========================\u4e91\u7aef\u73af\u5883\u53d8\u91cf\u7684\u5224\u65ad\u4e0e\u63a5\u6536=========================\r\n\r\n/**\r\n * sendNotify \u63a8\u9001\u901a\u77e5\u529f\u80fd\r\n * @param text \u901a\u77e5\u5934\r\n * @param desp \u901a\u77e5\u4f53\r\n * @param params \u67d0\u4e9b\u63a8\u9001\u901a\u77e5\u65b9\u5f0f\u70b9\u51fb\u5f39\u7a97\u53ef\u8df3\u8f6c, \u4f8b\uff1a{ url: 'https://abc.com' }\r\n * @param author \u4f5c\u8005\u4ed3\u5e93\u7b49\u4fe1\u606f  \u4f8b\uff1a`\u672c\u901a\u77e5 By\uff1ahttps://github.com/whyour/qinglong`\r\n * @returns {Promise<unknown>}\r\n */\r\nasync function sendNotify(\r\n  text,\r\n  desp,\r\n  params = {},\r\n  author = '\\n\\n\u672c\u901a\u77e5 By\uff1akyle\u7efc\u5408',\r\n) {\r\n  // \u63d0\u4f9b6\u79cd\u901a\u77e5\r\n  desp += author; // \u589e\u52a0\u4f5c\u8005\u4fe1\u606f\uff0c\u9632\u6b62\u88ab\u8d29\u5356\u7b49\r\n\r\n  // \u6839\u636e\u6807\u9898\u8df3\u8fc7\u4e00\u4e9b\u6d88\u606f\u63a8\u9001\uff0c\u73af\u5883\u53d8\u91cf\uff1aSKIP_PUSH_TITLE \u7528\u56de\u8f66\u5206\u9694\r\n  let skipTitle = process.env.SKIP_PUSH_TITLE;\r\n  if (skipTitle) {\r\n    if (skipTitle.split('\\n').includes(text)) {\r\n      console.info(text + '\u5728SKIP_PUSH_TITLE\u73af\u5883\u53d8\u91cf\u5185\uff0c\u8df3\u8fc7\u63a8\u9001\uff01');\r\n      return;\r\n    }\r\n  }\r\n\r\n  await Promise.all([\r\n    serverNotify(text, desp), // \u5fae\u4fe1server\u9171\r\n    pushPlusNotify(text, desp), // pushplus(\u63a8\u9001\u52a0)\r\n  ]);\r\n  // \u7531\u4e8e\u4e0a\u8ff0\u4e24\u79cd\u5fae\u4fe1\u901a\u77e5\u9700\u70b9\u51fb\u8fdb\u53bb\u624d\u80fd\u67e5\u770b\u5230\u8be6\u60c5\uff0c\u6545text(\u6807\u9898\u5185\u5bb9)\u643a\u5e26\u4e86\u8d26\u53f7\u5e8f\u53f7\u4ee5\u53ca\u6635\u79f0\u4fe1\u606f\uff0c\u65b9\u4fbf\u4e0d\u70b9\u51fb\u4e5f\u53ef\u77e5\u9053\u662f\u54ea\u4e2a\u4eac\u4e1c\u54ea\u4e2a\u6d3b\u52a8\r\n  text = text.match(/.*?(?=\\s?-)/g) ? text.match(/.*?(?=\\s?-)/g)[0] : text;\r\n  await Promise.all([\r\n    BarkNotify(text, desp, params), // iOS Bark APP\r\n    tgBotNotify(text, desp), // telegram \u673a\u5668\u4eba\r\n    ddBotNotify(text, desp), // \u9489\u9489\u673a\u5668\u4eba\r\n    qywxBotNotify(text, desp), // \u4f01\u4e1a\u5fae\u4fe1\u673a\u5668\u4eba\r\n    qywxamNotify(text, desp), // \u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u6d88\u606f\u63a8\u9001\r\n    iGotNotify(text, desp, params), // iGot\r\n    gobotNotify(text, desp), // go-cqhttp\r\n    gotifyNotify(text, desp), // gotify\r\n    ChatNotify(text, desp), // synolog chat\r\n    PushDeerNotify(text, desp), // PushDeer\r\n    aibotkNotify(text, desp), // \u667a\u80fd\u5fae\u79d8\u4e66\r\n    fsBotNotify(text, desp), // \u98de\u4e66\u673a\u5668\u4eba\r\n    smtpNotify(text, desp), // SMTP \u90ae\u4ef6\r\n    pushMeNotify(text, desp, params), // PushMe\r\n    chronocatNotify(text, desp), // Chronocat\r\n    webhookNotify(text, desp), // \u81ea\u5b9a\u4e49\u901a\u77e5\r\n  ]);\r\n}\r\n\r\nfunction gotifyNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (GOTIFY_URL && GOTIFY_TOKEN) {\r\n      const options = {\r\n        url: `${GOTIFY_URL}/message?token=${GOTIFY_TOKEN}`,\r\n        body: `title=${encodeURIComponent(text)}&message=${encodeURIComponent(\r\n          desp,\r\n        )}&priority=${GOTIFY_PRIORITY}`,\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('gotify\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.id) {\r\n              console.log('gotify\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else {\r\n              console.log(`${data.message}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve();\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction gobotNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (GOBOT_URL) {\r\n      const options = {\r\n        url: `${GOBOT_URL}?access_token=${GOBOT_TOKEN}&${GOBOT_QQ}`,\r\n        json: { message: `${text}\\n${desp}` },\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u53d1\u9001go-cqhttp\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.retcode === 0) {\r\n              console.log('go-cqhttp\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else if (data.retcode === 100) {\r\n              console.log(`go-cqhttp\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5f02\u5e38: ${data.errmsg}\\n`);\r\n            } else {\r\n              console.log(`go-cqhttp\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5f02\u5e38\\n${JSON.stringify(data)}`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction serverNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (SCKEY) {\r\n      // \u5fae\u4fe1server\u9171\u63a8\u9001\u901a\u77e5\u4e00\u4e2a\\n\u4e0d\u4f1a\u6362\u884c\uff0c\u9700\u8981\u4e24\u4e2a\\n\u624d\u80fd\u6362\u884c\uff0c\u6545\u505a\u6b64\u66ff\u6362\r\n      desp = desp.replace(/[\\n\\r]/g, '\\n\\n');\r\n      const options = {\r\n        url: SCKEY.includes('SCT')\r\n          ? `https://sctapi.ftqq.com/${SCKEY}.send`\r\n          : `https://sc.ftqq.com/${SCKEY}.send`,\r\n        body: `text=${text}&desp=${desp}`,\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            // server\u9171\u548cServer\u9171\xb7Turbo\u7248\u7684\u8fd4\u56dejson\u683c\u5f0f\u4e0d\u592a\u4e00\u6837\r\n            if (data.errno === 0 || data.data.errno === 0) {\r\n              console.log('server\u9171\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else if (data.errno === 1024) {\r\n              // \u4e00\u5206\u949f\u5185\u53d1\u9001\u76f8\u540c\u7684\u5185\u5bb9\u4f1a\u89e6\u53d1\r\n              console.log(`server\u9171\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5f02\u5e38: ${data.errmsg}\\n`);\r\n            } else {\r\n              console.log(`server\u9171\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5f02\u5e38\\n${JSON.stringify(data)}`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction PushDeerNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (PUSHDEER_KEY) {\r\n      // PushDeer \u5efa\u8bae\u5bf9\u6d88\u606f\u5185\u5bb9\u8fdb\u884c urlencode\r\n      desp = encodeURI(desp);\r\n      const options = {\r\n        url: PUSHDEER_URL || `https://api2.pushdeer.com/message/push`,\r\n        body: `pushkey=${PUSHDEER_KEY}&text=${text}&desp=${desp}&type=markdown`,\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            // \u901a\u8fc7\u8fd4\u56de\u7684result\u7684\u957f\u5ea6\u6765\u5224\u65ad\u662f\u5426\u6210\u529f\r\n            if (\r\n              data.content.result.length !== undefined &&\r\n              data.content.result.length > 0\r\n            ) {\r\n              console.log('PushDeer\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else {\r\n              console.log(`PushDeer\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5f02\u5e38\\n${JSON.stringify(data)}`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction ChatNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (CHAT_URL && CHAT_TOKEN) {\r\n      // \u5bf9\u6d88\u606f\u5185\u5bb9\u8fdb\u884c urlencode\r\n      desp = encodeURI(desp);\r\n      const options = {\r\n        url: `${CHAT_URL}${CHAT_TOKEN}`,\r\n        body: `payload={\"text\":\"${text}\\n${desp}\"}`,\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.success) {\r\n              console.log('Chat\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else {\r\n              console.log(`Chat\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5f02\u5e38\\n${JSON.stringify(data)}`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction BarkNotify(text, desp, params = {}) {\r\n  return new Promise((resolve) => {\r\n    if (BARK_PUSH) {\r\n      const options = {\r\n        url: `${BARK_PUSH}/${encodeURIComponent(text)}/${encodeURIComponent(\r\n          desp,\r\n        )}?icon=${BARK_ICON}&sound=${BARK_SOUND}&group=${BARK_GROUP}&level=${BARK_LEVEL}&url=${BARK_URL}&${querystring.stringify(\r\n          params,\r\n        )}`,\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        timeout,\r\n      };\r\n      $.get(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('Bark APP\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.code === 200) {\r\n              console.log('Bark APP\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else {\r\n              console.log(`${data.message}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve();\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction tgBotNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (TG_BOT_TOKEN && TG_USER_ID) {\r\n      const options = {\r\n        url: `${TG_API_HOST}/bot${TG_BOT_TOKEN}/sendMessage`,\r\n        json: {\r\n          chat_id: `${TG_USER_ID}`,\r\n          text: `${text}\\n\\n${desp}`,\r\n          disable_web_page_preview: true,\r\n        },\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        timeout,\r\n      };\r\n      if (TG_PROXY_HOST && TG_PROXY_PORT) {\r\n        const { HttpProxyAgent, HttpsProxyAgent } = require('hpagent');\r\n        const options = {\r\n          keepAlive: true,\r\n          keepAliveMsecs: 1000,\r\n          maxSockets: 256,\r\n          maxFreeSockets: 256,\r\n          proxy: `http://${TG_PROXY_AUTH}${TG_PROXY_HOST}:${TG_PROXY_PORT}`,\r\n        };\r\n        const httpAgent = new HttpProxyAgent(options);\r\n        const httpsAgent = new HttpsProxyAgent(options);\r\n        const agent = {\r\n          http: httpAgent,\r\n          https: httpsAgent,\r\n        };\r\n        Object.assign(options, { agent });\r\n      }\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('telegram\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.ok) {\r\n              console.log('Telegram\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\u3002\\n');\r\n            } else if (data.error_code === 400) {\r\n              console.log(\r\n                '\u8bf7\u4e3b\u52a8\u7ed9bot\u53d1\u9001\u4e00\u6761\u6d88\u606f\u5e76\u68c0\u67e5\u63a5\u6536\u7528\u6237ID\u662f\u5426\u6b63\u786e\u3002\\n',\r\n              );\r\n            } else if (data.error_code === 401) {\r\n              console.log('Telegram bot token \u586b\u5199\u9519\u8bef\u3002\\n');\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\nfunction ddBotNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    const options = {\r\n      url: `https://oapi.dingtalk.com/robot/send?access_token=${DD_BOT_TOKEN}`,\r\n      json: {\r\n        msgtype: 'text',\r\n        text: {\r\n          content: `${text}\\n\\n${desp}`,\r\n        },\r\n      },\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      timeout,\r\n    };\r\n    if (DD_BOT_TOKEN && DD_BOT_SECRET) {\r\n      const crypto = require('crypto');\r\n      const dateNow = Date.now();\r\n      const hmac = crypto.createHmac('sha256', DD_BOT_SECRET);\r\n      hmac.update(`${dateNow}\\n${DD_BOT_SECRET}`);\r\n      const result = encodeURIComponent(hmac.digest('base64'));\r\n      options.url = `${options.url}&timestamp=${dateNow}&sign=${result}`;\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u9489\u9489\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.errcode === 0) {\r\n              console.log('\u9489\u9489\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\u3002\\n');\r\n            } else {\r\n              console.log(`${data.errmsg}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else if (DD_BOT_TOKEN) {\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u9489\u9489\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.errcode === 0) {\r\n              console.log('\u9489\u9489\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5b8c\u6210\u3002\\n');\r\n            } else {\r\n              console.log(`${data.errmsg}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction qywxBotNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    const options = {\r\n      url: `${QYWX_ORIGIN}/cgi-bin/webhook/send?key=${QYWX_KEY}`,\r\n      json: {\r\n        msgtype: 'text',\r\n        text: {\r\n          content: `${text}\\n\\n${desp}`,\r\n        },\r\n      },\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      timeout,\r\n    };\r\n    if (QYWX_KEY) {\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u4f01\u4e1a\u5fae\u4fe1\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.errcode === 0) {\r\n              console.log('\u4f01\u4e1a\u5fae\u4fe1\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\u3002\\n');\r\n            } else {\r\n              console.log(`${data.errmsg}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction ChangeUserId(desp) {\r\n  const QYWX_AM_AY = QYWX_AM.split(',');\r\n  if (QYWX_AM_AY[2]) {\r\n    const userIdTmp = QYWX_AM_AY[2].split('|');\r\n    let userId = '';\r\n    for (let i = 0; i < userIdTmp.length; i++) {\r\n      const count = '\u8d26\u53f7' + (i + 1);\r\n      const count2 = '\u7b7e\u5230\u53f7 ' + (i + 1);\r\n      if (desp.match(count2)) {\r\n        userId = userIdTmp[i];\r\n      }\r\n    }\r\n    if (!userId) userId = QYWX_AM_AY[2];\r\n    return userId;\r\n  } else {\r\n    return '@all';\r\n  }\r\n}\r\n\r\nasync function qywxamNotify(text, desp) {\r\n  const MAX_LENGTH = 900;\r\n  if (desp.length > MAX_LENGTH) {\r\n    let d = desp.substr(0, MAX_LENGTH) + '\\n==More==';\r\n    await do_qywxamNotify(text, d);\r\n    await qywxamNotify(text, desp.substr(MAX_LENGTH));\r\n  } else {\r\n    return await do_qywxamNotify(text, desp);\r\n  }\r\n}\r\n\r\nfunction do_qywxamNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (QYWX_AM) {\r\n      const QYWX_AM_AY = QYWX_AM.split(',');\r\n      const options_accesstoken = {\r\n        url: `${QYWX_ORIGIN}/cgi-bin/gettoken`,\r\n        json: {\r\n          corpid: `${QYWX_AM_AY[0]}`,\r\n          corpsecret: `${QYWX_AM_AY[1]}`,\r\n        },\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options_accesstoken, (err, resp, data) => {\r\n        let html = desp.replace(/\\n/g, '<br/>');\r\n        let json = JSON.parse(data);\r\n        let accesstoken = json.access_token;\r\n        let options;\r\n\r\n        switch (QYWX_AM_AY[4]) {\r\n          case '0':\r\n            options = {\r\n              msgtype: 'textcard',\r\n              textcard: {\r\n                title: `${text}`,\r\n                description: `${desp}`,\r\n                url: 'https://github.com/whyour/qinglong',\r\n                btntxt: '\u66f4\u591a',\r\n              },\r\n            };\r\n            break;\r\n\r\n          case '1':\r\n            options = {\r\n              msgtype: 'text',\r\n              text: {\r\n                content: `${text}\\n\\n${desp}`,\r\n              },\r\n            };\r\n            break;\r\n\r\n          default:\r\n            options = {\r\n              msgtype: 'mpnews',\r\n              mpnews: {\r\n                articles: [\r\n                  {\r\n                    title: `${text}`,\r\n                    thumb_media_id: `${QYWX_AM_AY[4]}`,\r\n                    author: `\u667a\u80fd\u52a9\u624b`,\r\n                    content_source_url: ``,\r\n                    content: `${html}`,\r\n                    digest: `${desp}`,\r\n                  },\r\n                ],\r\n              },\r\n            };\r\n        }\r\n        if (!QYWX_AM_AY[4]) {\r\n          // \u5982\u4e0d\u63d0\u4f9b\u7b2c\u56db\u4e2a\u53c2\u6570,\u5219\u9ed8\u8ba4\u8fdb\u884c\u6587\u672c\u6d88\u606f\u7c7b\u578b\u63a8\u9001\r\n          options = {\r\n            msgtype: 'text',\r\n            text: {\r\n              content: `${text}\\n\\n${desp}`,\r\n            },\r\n          };\r\n        }\r\n        options = {\r\n          url: `${QYWX_ORIGIN}/cgi-bin/message/send?access_token=${accesstoken}`,\r\n          json: {\r\n            touser: `${ChangeUserId(desp)}`,\r\n            agentid: `${QYWX_AM_AY[3]}`,\r\n            safe: '0',\r\n            ...options,\r\n          },\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        };\r\n\r\n        $.post(options, (err, resp, data) => {\r\n          try {\r\n            if (err) {\r\n              console.log(\r\n                '\u6210\u5458ID:' +\r\n                  ChangeUserId(desp) +\r\n                  '\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u6d88\u606f\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n',\r\n              );\r\n              console.log(err);\r\n            } else {\r\n              data = JSON.parse(data);\r\n              if (data.errcode === 0) {\r\n                console.log(\r\n                  '\u6210\u5458ID:' +\r\n                    ChangeUserId(desp) +\r\n                    '\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u6d88\u606f\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\u3002\\n',\r\n                );\r\n              } else {\r\n                console.log(`${data.errmsg}\\n`);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            $.logErr(e, resp);\r\n          } finally {\r\n            resolve(data);\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction iGotNotify(text, desp, params = {}) {\r\n  return new Promise((resolve) => {\r\n    if (IGOT_PUSH_KEY) {\r\n      // \u6821\u9a8c\u4f20\u5165\u7684IGOT_PUSH_KEY\u662f\u5426\u6709\u6548\r\n      const IGOT_PUSH_KEY_REGX = new RegExp('^[a-zA-Z0-9]{24}$');\r\n      if (!IGOT_PUSH_KEY_REGX.test(IGOT_PUSH_KEY)) {\r\n        console.log('\u60a8\u6240\u63d0\u4f9b\u7684IGOT_PUSH_KEY\u65e0\u6548\\n');\r\n        resolve();\r\n        return;\r\n      }\r\n      const options = {\r\n        url: `https://push.hellyw.com/${IGOT_PUSH_KEY.toLowerCase()}`,\r\n        body: `title=${text}&content=${desp}&${querystring.stringify(params)}`,\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            if (typeof data === 'string') data = JSON.parse(data);\r\n            if (data.ret === 0) {\r\n              console.log('iGot\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else {\r\n              console.log(`iGot\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff1a${data.errMsg}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction pushPlusNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (PUSH_PLUS_TOKEN) {\r\n      desp = desp.replace(/[\\n\\r]/g, '<br>'); // \u9ed8\u8ba4\u4e3ahtml, \u4e0d\u652f\u6301plaintext\r\n      const body = {\r\n        token: `${PUSH_PLUS_TOKEN}`,\r\n        title: `${text}`,\r\n        content: `${desp}`,\r\n        topic: `${PUSH_PLUS_USER}`,\r\n      };\r\n      const options = {\r\n        url: `https://www.pushplus.plus/send`,\r\n        body: JSON.stringify(body),\r\n        headers: {\r\n          'Content-Type': ' application/json',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log(\r\n              `push+\u53d1\u9001${\r\n                PUSH_PLUS_USER ? '\u4e00\u5bf9\u591a' : '\u4e00\u5bf9\u4e00'\r\n              }\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n`,\r\n            );\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.code === 200) {\r\n              console.log(\r\n                `push+\u53d1\u9001${\r\n                  PUSH_PLUS_USER ? '\u4e00\u5bf9\u591a' : '\u4e00\u5bf9\u4e00'\r\n                }\u901a\u77e5\u6d88\u606f\u5b8c\u6210\u3002\\n`,\r\n              );\r\n            } else {\r\n              console.log(\r\n                `push+\u53d1\u9001${\r\n                  PUSH_PLUS_USER ? '\u4e00\u5bf9\u591a' : '\u4e00\u5bf9\u4e00'\r\n                }\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff1a${data.msg}\\n`,\r\n              );\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction aibotkNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (AIBOTK_KEY && AIBOTK_TYPE && AIBOTK_NAME) {\r\n      let json = {};\r\n      let url = '';\r\n      switch (AIBOTK_TYPE) {\r\n        case 'room':\r\n          url = 'https://api-bot.aibotk.com/openapi/v1/chat/room';\r\n          json = {\r\n            apiKey: `${AIBOTK_KEY}`,\r\n            roomName: `${AIBOTK_NAME}`,\r\n            message: {\r\n              type: 1,\r\n              content: `\u3010\u9752\u9f99\u5feb\u8baf\u3011\\n\\n${text}\\n${desp}`,\r\n            },\r\n          };\r\n          break;\r\n        case 'contact':\r\n          url = 'https://api-bot.aibotk.com/openapi/v1/chat/contact';\r\n          json = {\r\n            apiKey: `${AIBOTK_KEY}`,\r\n            name: `${AIBOTK_NAME}`,\r\n            message: {\r\n              type: 1,\r\n              content: `\u3010\u9752\u9f99\u5feb\u8baf\u3011\\n\\n${text}\\n${desp}`,\r\n            },\r\n          };\r\n          break;\r\n      }\r\n      const options = {\r\n        url: url,\r\n        json,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u667a\u80fd\u5fae\u79d8\u4e66\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.code === 0) {\r\n              console.log('\u667a\u80fd\u5fae\u79d8\u4e66\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\u3002\\n');\r\n            } else {\r\n              console.log(`${data.error}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction fsBotNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (FSKEY) {\r\n      const options = {\r\n        url: `https://open.feishu.cn/open-apis/bot/v2/hook/${FSKEY}`,\r\n        json: { msg_type: 'text', content: { text: `${text}\\n\\n${desp}` } },\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.StatusCode === 0) {\r\n              console.log('\u98de\u4e66\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else {\r\n              console.log(`${data.msg}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nasync function smtpNotify(text, desp) {\r\n  if (![SMTP_EMAIL, SMTP_PASSWORD].every(Boolean) || !SMTP_SERVICE) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const nodemailer = require('nodemailer');\r\n    const transporter = nodemailer.createTransport({\r\n      service: SMTP_SERVICE,\r\n      auth: {\r\n        user: SMTP_EMAIL,\r\n        pass: SMTP_PASSWORD,\r\n      },\r\n    });\r\n\r\n    const addr = SMTP_NAME ? `\"${SMTP_NAME}\" <${SMTP_EMAIL}>` : SMTP_EMAIL;\r\n    const info = await transporter.sendMail({\r\n      from: addr,\r\n      to: addr,\r\n      subject: text,\r\n      html: `${desp.replace(/\\n/g, '<br/>')}`,\r\n    });\r\n\r\n    transporter.close();\r\n\r\n    if (info.messageId) {\r\n      console.log('SMTP\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n      return true;\r\n    }\r\n    console.log('SMTP\u53d1\u9001\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n');\r\n  } catch (e) {\r\n    console.log('SMTP\u53d1\u9001\u901a\u77e5\u6d88\u606f\u51fa\u73b0\u9519\u8bef\uff01\uff01\\n');\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nfunction pushMeNotify(text, desp, params = {}) {\r\n  return new Promise((resolve) => {\r\n    if (PUSHME_KEY) {\r\n      const options = {\r\n        url: `https://push.i-i.me?push_key=${PUSHME_KEY}`,\r\n        json: { title: text, content: desp, ...params },\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        timeout,\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('PushMeNotify\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            if (data === 'success') {\r\n              console.log('PushMe\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else {\r\n              console.log(`${data}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve(data);\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nfunction chronocatNotify(title, desp) {\r\n  return new Promise((resolve) => {\r\n    if (!CHRONOCAT_TOKEN || !CHRONOCAT_QQ || !CHRONOCAT_URL) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const user_ids = CHRONOCAT_QQ.match(/user_id=(\\d+)/g)?.map(\r\n      (match) => match.split('=')[1],\r\n    );\r\n    const group_ids = CHRONOCAT_QQ.match(/group_id=(\\d+)/g)?.map(\r\n      (match) => match.split('=')[1],\r\n    );\r\n\r\n    const url = `${CHRONOCAT_URL}/api/message/send`;\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${CHRONOCAT_TOKEN}`,\r\n    };\r\n\r\n    for (const [chat_type, ids] of [\r\n      [1, user_ids],\r\n      [2, group_ids],\r\n    ]) {\r\n      if (!ids) {\r\n        continue;\r\n      }\r\n      for (const chat_id of ids) {\r\n        const data = {\r\n          peer: {\r\n            chatType: chat_type,\r\n            peerUin: chat_id,\r\n          },\r\n          elements: [\r\n            {\r\n              elementType: 1,\r\n              textElement: {\r\n                content: `${title}\\n\\n${desp}`,\r\n              },\r\n            },\r\n          ],\r\n        };\r\n        const options = {\r\n          url: url,\r\n          json: data,\r\n          headers,\r\n          timeout,\r\n        };\r\n        $.post(options, (err, resp, data) => {\r\n          try {\r\n            if (err) {\r\n              console.log('Chronocat\u53d1\u9001QQ\u901a\u77e5\u6d88\u606f\u5931\u8d25\uff01\uff01\\n');\r\n              console.log(err);\r\n            } else {\r\n              data = JSON.parse(data);\r\n              if (chat_type === 1) {\r\n                console.log(`QQ\u4e2a\u4eba\u6d88\u606f:${ids}\u63a8\u9001\u6210\u529f\uff01`);\r\n              } else {\r\n                console.log(`QQ\u7fa4\u6d88\u606f:${ids}\u63a8\u9001\u6210\u529f\uff01`);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            $.logErr(e, resp);\r\n          } finally {\r\n            resolve(data);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction webhookNotify(text, desp) {\r\n  return new Promise((resolve) => {\r\n    if (WEBHOOK_URL) {\r\n      const options = {\r\n        url: `${WEBHOOK_URL}`,\r\n        body: `{\"title\":\"${text}\",\"content\":\"${desp}\"}`,\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n      };\r\n      $.post(options, (err, resp, data) => {\r\n        try {\r\n          if (err) {\r\n            console.log('kyle\u81ea\u5b9a\u4e49\u53d1\u9001\u901a\u77e5\u8c03\u7528API\u5931\u8d25\uff01\uff01\\n');\r\n            console.log(err);\r\n          } else {\r\n            data = JSON.parse(data);\r\n            if (data.code=\"200\") {\r\n              console.log('kyle\u81ea\u5b9a\u4e49\u53d1\u9001\u901a\u77e5\u6d88\u606f\u6210\u529f\ud83c\udf89\\n');\r\n            } else {\r\n              console.log(`${data.message}\\n`);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          $.logErr(e, resp);\r\n        } finally {\r\n          resolve();\r\n        }\r\n      });\r\n    } else {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\nfunction parseString(input, valueFormatFn) {\r\n  const regex = /(\\w+):\\s*((?:(?!\\n\\w+:).)*)/g;\r\n  const matches = {};\r\n\r\n  let match;\r\n  while ((match = regex.exec(input)) !== null) {\r\n    const [, key, value] = match;\r\n    const _key = key.trim();\r\n    if (!_key || matches[_key]) {\r\n      continue;\r\n    }\r\n\r\n    let _value = value.trim();\r\n\r\n    try {\r\n      _value = valueFormatFn ? valueFormatFn(_value) : _value;\r\n      const jsonValue = JSON.parse(_value);\r\n      matches[_key] = jsonValue;\r\n    } catch (error) {\r\n      matches[_key] = _value;\r\n    }\r\n  }\r\n\r\n  return matches;\r\n}\r\n\r\nfunction parseHeaders(headers) {\r\n  if (!headers) return {};\r\n\r\n  const parsed = {};\r\n  let key;\r\n  let val;\r\n  let i;\r\n\r\n  headers &&\r\n    headers.split('\\n').forEach(function parser(line) {\r\n      i = line.indexOf(':');\r\n      key = line.substring(0, i).trim().toLowerCase();\r\n      val = line.substring(i + 1).trim();\r\n\r\n      if (!key) {\r\n        return;\r\n      }\r\n\r\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\r\n    });\r\n\r\n  return parsed;\r\n}\r\n\r\nfunction parseBody(body, contentType, valueFormatFn) {\r\n  if (contentType === 'text/plain' || !body) {\r\n    return body;\r\n  }\r\n\r\n  const parsed = parseString(body, valueFormatFn);\r\n\r\n  switch (contentType) {\r\n    case 'multipart/form-data':\r\n      return Object.keys(parsed).reduce((p, c) => {\r\n        p.append(c, parsed[c]);\r\n        return p;\r\n      }, new FormData());\r\n    case 'application/x-www-form-urlencoded':\r\n      return Object.keys(parsed).reduce((p, c) => {\r\n        return p ? `${p}&${c}=${parsed[c]}` : `${c}=${parsed[c]}`;\r\n      });\r\n  }\r\n\r\n  return parsed;\r\n}\r\n\r\nfunction formatBodyFun(contentType, body) {\r\n  if (!body) return {};\r\n  switch (contentType) {\r\n    case 'application/json':\r\n      return { json: body };\r\n    case 'multipart/form-data':\r\n      return { form: body };\r\n    case 'application/x-www-form-urlencoded':\r\n      return { body };\r\n  }\r\n  return {};\r\n}\r\n\r\nfunction formatNotifyContentFun(url, body, title, content) {\r\n  if (!url.includes('$title') && !body.includes('$title')) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    formatUrl: url\r\n      .replaceAll('$title', encodeURIComponent(title))\r\n      .replaceAll('$content', encodeURIComponent(content)),\r\n    formatBody: body\r\n      .replaceAll('$title', title)\r\n      .replaceAll('$content', content),\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  sendNotify,\r\n  BARK_PUSH,\r\n};\r\n\r\n// prettier-ignore\r\nfunction Env(t, s) { return new class { constructor(t, s) { this.name = t, this.data = null, this.dataFile = \"box.dat\", this.logs = [], this.logSeparator = \"\\n\", this.startTime = (new Date).getTime(), Object.assign(this, s), this.log(\"\", `\\ud83d\\udd14${this.name}, \\u5f00\\u59cb!`) } isNode() { return \"undefined\" != typeof module && !!module.exports } isQuanX() { return \"undefined\" != typeof $task } isSurge() { return \"undefined\" != typeof $httpClient && \"undefined\" == typeof $loon } isLoon() { return \"undefined\" != typeof $loon } getScript(t) { return new Promise(s => { $.get({ url: t }, (t, e, i) => s(i)) }) } runScript(t, s) { return new Promise(e => { let i = this.getdata(\"@chavy_boxjs_userCfgs.httpapi\"); i = i ? i.replace(/\\n/g, \"\").trim() : i; let o = this.getdata(\"@chavy_boxjs_userCfgs.httpapi_timeout\"); o = o ? 1 * o : 20, o = s && s.timeout ? s.timeout : o; const [h, a] = i.split(\"@\"), r = { url: `http://${a}/v1/scripting/evaluate`, body: { script_text: t, mock_type: \"cron\", timeout: o }, headers: { \"X-Key\": h, Accept: \"*/*\" } }; $.post(r, (t, s, i) => e(i)) }).catch(t => this.logErr(t)) } loaddata() { if (!this.isNode()) return {}; { this.fs = this.fs ? this.fs : require(\"fs\"), this.path = this.path ? this.path : require(\"path\"); const t = this.path.resolve(this.dataFile), s = this.path.resolve(process.cwd(), this.dataFile), e = this.fs.existsSync(t), i = !e && this.fs.existsSync(s); if (!e && !i) return {}; { const i = e ? t : s; try { return JSON.parse(this.fs.readFileSync(i)) } catch (t) { return {} } } } } writedata() { if (this.isNode()) { this.fs = this.fs ? this.fs : require(\"fs\"), this.path = this.path ? this.path : require(\"path\"); const t = this.path.resolve(this.dataFile), s = this.path.resolve(process.cwd(), this.dataFile), e = this.fs.existsSync(t), i = !e && this.fs.existsSync(s), o = JSON.stringify(this.data); e ? this.fs.writeFileSync(t, o) : i ? this.fs.writeFileSync(s, o) : this.fs.writeFileSync(t, o) } } lodash_get(t, s, e) { const i = s.replace(/\\[(\\d+)\\]/g, \".$1\").split(\".\"); let o = t; for (const t of i) if (o = Object(o)[t], void 0 === o) return e; return o } lodash_set(t, s, e) { return Object(t) !== t ? t : (Array.isArray(s) || (s = s.toString().match(/[^.[\\]]+/g) || []), s.slice(0, -1).reduce((t, e, i) => Object(t[e]) === t[e] ? t[e] : t[e] = Math.abs(s[i + 1]) >> 0 == +s[i + 1] ? [] : {}, t)[s[s.length - 1]] = e, t) } getdata(t) { let s = this.getval(t); if (/^@/.test(t)) { const [, e, i] = /^@(.*?)\\.(.*?)$/.exec(t), o = e ? this.getval(e) : \"\"; if (o) try { const t = JSON.parse(o); s = t ? this.lodash_get(t, i, \"\") : s } catch (t) { s = \"\" } } return s } setdata(t, s) { let e = !1; if (/^@/.test(s)) { const [, i, o] = /^@(.*?)\\.(.*?)$/.exec(s), h = this.getval(i), a = i ? \"null\" === h ? null : h || \"{}\" : \"{}\"; try { const s = JSON.parse(a); this.lodash_set(s, o, t), e = this.setval(JSON.stringify(s), i) } catch (s) { const h = {}; this.lodash_set(h, o, t), e = this.setval(JSON.stringify(h), i) } } else e = $.setval(t, s); return e } getval(t) { return this.isSurge() || this.isLoon() ? $persistentStore.read(t) : this.isQuanX() ? $prefs.valueForKey(t) : this.isNode() ? (this.data = this.loaddata(), this.data[t]) : this.data && this.data[t] || null } setval(t, s) { return this.isSurge() || this.isLoon() ? $persistentStore.write(t, s) : this.isQuanX() ? $prefs.setValueForKey(t, s) : this.isNode() ? (this.data = this.loaddata(), this.data[s] = t, this.writedata(), !0) : this.data && this.data[s] || null } initGotEnv(t) { this.got = this.got ? this.got : require(\"got\"), this.cktough = this.cktough ? this.cktough : require(\"tough-cookie\"), this.ckjar = this.ckjar ? this.ckjar : new this.cktough.CookieJar, t && (t.headers = t.headers ? t.headers : {}, void 0 === t.headers.Cookie && void 0 === t.cookieJar && (t.cookieJar = this.ckjar)) } get(t, s = (() => { })) { t.headers && (delete t.headers[\"Content-Type\"], delete t.headers[\"Content-Length\"]), this.isSurge() || this.isLoon() ? $httpClient.get(t, (t, e, i) => { !t && e && (e.body = i, e.statusCode = e.status), s(t, e, i) }) : this.isQuanX() ? $task.fetch(t).then(t => { const { statusCode: e, statusCode: i, headers: o, body: h } = t; s(null, { status: e, statusCode: i, headers: o, body: h }, h) }, t => s(t)) : this.isNode() && (this.initGotEnv(t), this.got(t).on(\"redirect\", (t, s) => { try { const e = t.headers[\"set-cookie\"].map(this.cktough.Cookie.parse).toString(); this.ckjar.setCookieSync(e, null), s.cookieJar = this.ckjar } catch (t) { this.logErr(t) } }).then(t => { const { statusCode: e, statusCode: i, headers: o, body: h } = t; s(null, { status: e, statusCode: i, headers: o, body: h }, h) }, t => s(t))) } post(t, s = (() => { })) { if (t.body && t.headers && !t.headers[\"Content-Type\"] && (t.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"), delete t.headers[\"Content-Length\"], this.isSurge() || this.isLoon()) $httpClient.post(t, (t, e, i) => { !t && e && (e.body = i, e.statusCode = e.status), s(t, e, i) }); else if (this.isQuanX()) t.method = \"POST\", $task.fetch(t).then(t => { const { statusCode: e, statusCode: i, headers: o, body: h } = t; s(null, { status: e, statusCode: i, headers: o, body: h }, h) }, t => s(t)); else if (this.isNode()) { this.initGotEnv(t); const { url: e, ...i } = t; this.got.post(e, i).then(t => { const { statusCode: e, statusCode: i, headers: o, body: h } = t; s(null, { status: e, statusCode: i, headers: o, body: h }, h) }, t => s(t)) } } time(t) { let s = { \"M+\": (new Date).getMonth() + 1, \"d+\": (new Date).getDate(), \"H+\": (new Date).getHours(), \"m+\": (new Date).getMinutes(), \"s+\": (new Date).getSeconds(), \"q+\": Math.floor(((new Date).getMonth() + 3) / 3), S: (new Date).getMilliseconds() }; /(y+)/.test(t) && (t = t.replace(RegExp.$1, ((new Date).getFullYear() + \"\").substr(4 - RegExp.$1.length))); for (let e in s) new RegExp(\"(\" + e + \")\").test(t) && (t = t.replace(RegExp.$1, 1 == RegExp.$1.length ? s[e] : (\"00\" + s[e]).substr((\"\" + s[e]).length))); return t } msg(s = t, e = \"\", i = \"\", o) { const h = t => !t || !this.isLoon() && this.isSurge() ? t : \"string\" == typeof t ? this.isLoon() ? t : this.isQuanX() ? { \"open-url\": t } : void 0 : \"object\" == typeof t && (t[\"open-url\"] || t[\"media-url\"]) ? this.isLoon() ? t[\"open-url\"] : this.isQuanX() ? t : void 0 : void 0; $.isMute || (this.isSurge() || this.isLoon() ? $notification.post(s, e, i, h(o)) : this.isQuanX() && $notify(s, e, i, h(o))), this.logs.push(\"\", \"==============\\ud83d\\udce3\\u7cfb\\u7edf\\u901a\\u77e5\\ud83d\\udce3==============\"), this.logs.push(s), e && this.logs.push(e), i && this.logs.push(i) } log(...t) { t.length > 0 ? this.logs = [...this.logs, ...t] : console.log(this.logs.join(this.logSeparator)) } logErr(t, s) { const e = !this.isSurge() && !this.isQuanX() && !this.isLoon(); e ? $.log(\"\", `\\u2757\\ufe0f${this.name}, \\u9519\\u8bef!`, t.stack) : $.log(\"\", `\\u2757\\ufe0f${this.name}, \\u9519\\u8bef!`, t) } wait(t) { return new Promise(s => setTimeout(s, t)) } done(t = {}) { const s = (new Date).getTime(), e = (s - this.startTime) / 1e3; this.log(\"\", `\\ud83d\\udd14${this.name}, \\u7ed3\\u675f! \\ud83d\\udd5b ${e} \\u79d2`), this.log(), (this.isSurge() || this.isQuanX() || this.isLoon()) && $done(t) } }(t, s) }\n"})})]})}function l(n={}){const{wrapper:r}={...(0,o.R)(),...n.components};return r?(0,s.jsx)(r,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}}}]);